//背景:线段树练手思维题
//原理:线段树 + 反转题
//时间复杂度:o(nlogn)
#include <bits/stdc++.h>
#define ll long long//宏定义
using namespace std;
ll tree[400005];//记录对应节点有多少盏灯亮,初始全为0
ll laz[400005];
void up(int pos)//向上更新,无特别
{
    int l = pos<<1;
    int r = (pos<<1)|1;
    tree[pos] = tree[l] + tree[r];
}
void pd(int s,int t,int pos)//下放懒标记,特殊
{
    int mid = (s+t)>>1;
    int l = pos<<1;
    int r = (pos<<1)|1;
    if(laz[pos])//如果有翻转懒标记
    {
		//神之一笔:如果对某个区间进行一次翻转,那么灯亮数为区间长度减去原来的灯亮数
        tree[l] = (laz[pos]%2 == 0)?tree[l]:((mid - s + 1) - tree[l]);//奇偶判断反转
        tree[r] = (laz[pos]%2 == 0)?tree[r]:((t - mid) - tree[r]);//同理
        laz[l] += laz[pos];//懒标记累加
        laz[r] += laz[pos];//懒标记累加
        laz[pos] = 0;//清空
    }
}
void revise(int l,int r,int s,int t,int pos)//区间修改
{
    if (l<=s&&r>=t)//找到极大区间
    {
        tree[pos] = (t-s+1) - tree[pos];//翻转
        laz[pos]++;//翻转次数加1
        return;//一定不要忘了返回
    }
    int mid = (s+t)>>1;//二分
    pd(s,t,pos);//下放标记
    if(l <= mid) revise(l,r,s,mid,pos<<1);//修改左右儿子
    if(r >= mid + 1) revise(l,r,mid+1,t,(pos<<1)|1);
    up(pos);//更新当前节点
}
int getsum(int l,int r,int s,int t,int pos)//求和
{
    if(l<=s&&r>=t) return tree[pos];
    int mid = (s+t)>>1;
    int sum = 0;
    pd(s,t,pos);
    if(l <= mid) sum += getsum(l,r,s,mid,pos<<1);
    if(r >= mid + 1) sum += getsum(l,r,mid+1,t,(pos<<1)|1);
    return sum;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n,m,x,y,c;
    cin>>n>>m;
    while(m--)
    {
        cin>>c>>x>>y;
        if(c == 0) revise(x,y,1,n,1);
        else if(c == 1) cout<<getsum(x,y,1,n,1)<<"\n";
    }
    return 0;
}
