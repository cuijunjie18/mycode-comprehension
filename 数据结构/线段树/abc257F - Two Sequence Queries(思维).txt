//背景:赛后一周补题,线段树思维好题
//原理:https://www.cnblogs.com/onlyblues/p/18239834 优美的代码
//难点:线段树容易出错
//时间复杂度:o(qlogn)
#include <bits/stdc++.h>
#define ll long long
#define MAXN 200005
using namespace std;
const int md = 998244353;
//线段树节点相关数组记得开4倍,防RE
ll tree[MAXN<<2];//答案线段树
ll treea[MAXN<<2];//a数组的和
ll treeb[MAXN<<2];//b数组的和
ll a[MAXN];//a原始数组
ll b[MAXN];//b原始数组
ll laza[MAXN<<2];//a区间加的懒标记
ll lazb[MAXN<<2];//b区间加的懒标记
void up(int pos)//向上更新
{
	int l = pos<<1;//获取左右节点
	int r = (pos<<1)|1;
	tree[pos] = (tree[l] + tree[r])%md;//答案累加
	treea[pos] = (treea[l] + treea[r])%md;//a区间和累加
	treeb[pos] = (treeb[l] + treeb[r])%md;//b区间和累加
}
void pd(int s,int t,int  pos)//线段树构造的核心函数
{
	int mid = (s+t)>>1;
	int l = pos<<1;
	int r = (pos<<1)|1;
	//传递对应的懒标记,注意是累加
	laza[l] = (laza[l] + laza[pos])%md;
	laza[r] = (laza[r] + laza[pos])%md;
	lazb[l] = (lazb[l] + lazb[pos])%md;
	lazb[r] = (lazb[r] + lazb[pos])%md;//就是这里出错了,r写成了l
	
	//区间和及答案更新,根据推导公式,要先更新答案数组
	tree[l] = (tree[l] + lazb[pos]*treea[l]%md + laza[pos]*treeb[l]%md + laza[pos]*lazb[pos]%md*(mid - s + 1))%md;
	tree[r] = (tree[r] + lazb[pos]*treea[r]%md + laza[pos]*treeb[r]%md + laza[pos]*lazb[pos]%md*(t - mid))%md;
	treea[l] = (treea[l] + (mid - s + 1)*laza[pos]%md)%md;
	treea[r] = (treea[r] + (t - mid)*laza[pos]%md)%md;
	treeb[l] = (treeb[l] + (mid - s + 1)*lazb[pos]%md)%md;
	treeb[r] = (treeb[r] + (t - mid)*lazb[pos]%md)%md;
	
	//懒标记清空
	laza[pos] = lazb[pos] = 0;
}
void Build(int s,int t,int pos)//建树
{
	if(s == t)
	{
		tree[pos] = a[s]*b[s]%md;
		treea[pos] = a[s]%md;
		treeb[pos] = b[s]%md;
		return;
	}
	int mid = (s+t)>>1;
	Build(s,mid,pos<<1);
	Build(mid+1,t,(pos<<1)|1);
	up(pos);
}
void add(int l,int r,int s,int t,int pos,ll x,ll y)//区间加
{
	if(l<=s&&r>=t)//找到了极大区间
	{
	    //还是先更新答案数组
		tree[pos] = (tree[pos] + y*treea[pos]%md + x*treeb[pos]%md + x*y%md*(t-s+1)%md)%md;	
		treea[pos] = (treea[pos] + (t-s+1)*x)%md;
		treeb[pos] = (treeb[pos] + (t-s+1)*y)%md;
		//懒标记累加
		laza[pos] = (laza[pos] + x)%md;
		lazb[pos] = (lazb[pos] + y)%md;
		return;
	}
	pd(s,t,pos);//下放标记
	int mid = (s+t)>>1;
	if(l <= mid) add(l,r,s,mid,pos<<1,x,y);
	if(r >= mid + 1) add(l,r,mid+1,t,(pos<<1)|1,x,y);
	up(pos);
}
ll getans(int l,int r,int s,int t,int pos)
{
	if(l<=s&&r>=t) return tree[pos];
	pd(s,t,pos);//询问的时候也要下放标记
	int mid = (s+t)>>1;
	ll ans = 0;
	if(l <= mid) ans = (ans + getans(l,r,s,mid,pos<<1))%md;
	if(r >= mid + 1) ans = (ans + getans(l,r,mid+1,t,(pos<<1)|1))%md;
	return ans;
}
int main()
{
	ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	int n,q,c,x,y;
	ll k;
	cin>>n>>q;
	for (int i = 1;i<=n;i++) cin>>a[i];
	for (int i = 1;i<=n;i++) cin>>b[i];
	Build(1,n,1);
	while(q--)
	{
		cin>>c;
		if(c == 1)
		{
			cin>>x>>y>>k;
			add(x,y,1,n,1,k,0);
		}
		else if(c == 2)
		{
			cin>>x>>y>>k;
			add(x,y,1,n,1,0,k);
		}
		else if(c == 3)
		{
			cin>>x>>y;
			cout<<getans(x,y,1,n,1)<<"\n";
		}
	}
	return 0;
}