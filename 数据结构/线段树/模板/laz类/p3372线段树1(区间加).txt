//背景:学习线段树记录,模板题,区间加区间查询
//难点:理解lazy标记的下放过程(更新与查询过程均需要),及线段树时间复杂度的合理性
//核心精髓:要用到某个节点才下放标记,保证时间复杂度
//时间复杂度:o(nlogn)
#include <bits/stdc++.h>
#define ll long long//宏定义long long
using namespace std;
ll tree[4*100005];//线段树节点数组,每个节点代表特定区间的和,注意要开4倍大小
ll lazy[4*100005];//懒惰标记,代表当前区间被添加的大小,同样是4倍大小
ll a[100005];//初始数组
void Build(int l,int r,int pos)//建立线段树,pos为节点编号
{
    if(l == r)//到底了
    {
        tree[pos] = a[l];//记录
        return;//返回
    }
    int mid = (l+r)>>1;//二分
    Build(l,mid,2*pos);//建立左树
    Build(mid+1,r,2*pos+1);//建立右树
    tree[pos] = tree[2*pos] + tree[2*pos+1];//用建好的左右子树计算当前和
}
void update(int l,int r,int s,int t,int pos,ll k)
{
    if(l<=s&&r>=t)//如果当前区间是对于修改区间而言的一个极大区间
    {
        tree[pos] += k*(t-s+1);//更新
        lazy[pos] += k;//累加懒惰标记,注意是累加,不是赋值,因为可能当前区间被修改多次
        return;//极大区间后不在往下(往下的不更新,用到时候再更新,确保时间复杂度)
    }
    int mid = (s+t)>>1;//二分
    if(lazy[pos]&&s != t)//如果当前区间不是极大区间且有标记未下放,并且不是叶子节点
    {
        tree[2*pos] += (mid-s+1)*lazy[pos];//下放标记到左子树
        tree[2*pos+1] += (t-mid)*lazy[pos];//下放标记到右子树
        lazy[2*pos] += lazy[pos];//注意,这里不要忘了左右子树累加标记
        lazy[2*pos+1] += lazy[pos];
        lazy[pos] = 0;//清空当前区间标记
    }
    if(l <= mid) update(l,r,s,mid,2*pos,k);//如果左边还有交集,还要更新左子树
    if(r >= mid+1) update(l,r,mid+1,t,2*pos+1,k);//右边同理
    tree[pos] = tree[2*pos] + tree[2*pos+1];//最后一定不要忘了累加,因为当前节点不是极大区间,还没更新
}
ll getsum(int l,int r,int s,int t,int pos)//区间求和
{
    if(l<=s&&r>=t) return tree[pos];//极大区间直接返回
    int mid = (s+t)>>1;//二分
    if(lazy[pos]&&s != t)//同更新函数的思想,即遍历到再去更新
    {
        tree[2*pos] += (mid-s+1)*lazy[pos];
        tree[2*pos+1] += (t-mid)*lazy[pos];
        lazy[2*pos] += lazy[pos];
        lazy[2*pos+1] += lazy[pos];
        lazy[pos] = 0;
    }
    ll sum = 0;//初始化和
    if(l <= mid) sum += getsum(l,r,s,mid,2*pos);//左边有就累加左子树
    if(r >= mid + 1) sum += getsum(l,r,mid+1,t,2*pos+1);//右边同理
    //求和不需要更新自己,因为没有改变,更新也没错
    return sum;//返回
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n,m,c,x,y,k;
    cin>>n>>m;
    for (int i = 1;i<=n;i++) cin>>a[i];//输入原始数据
    Build(1,n,1);//建树
    while(m--)
    {
        cin>>c;
        if(c == 1)
        {
            cin>>x>>y>>k;
            update(x,y,1,n,1,k);//更新
        }
        else if(c == 2)
        {
            cin>>x>>y;
            cout<<getsum(x,y,1,n,1)<<"\n";//输出区间和
        }
    }
    return 0;
}
