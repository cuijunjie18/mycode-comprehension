//背景:线段树模板题,进行的是将某个区间全部置为一个数
#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll sum[400005];//线段树数组4倍大小
ll laz[400005];//懒标记
bool v[400005];//标记是否下放了懒标记
ll a[100005];//原数组
void up(int pos)//利用左右子树更新当前节点
{
    int l = pos<<1;
    int r = (pos<<1)|1;
    sum[pos] = sum[l] + sum[r];
    return;
}
void pd(int s,int t,int pos)//下放标记
{
    int mid = (s+t)>>1;
    if(v[pos])//注意区别,这里要通过bool型处理,因为可能区间被置零
    {
        sum[pos<<1] = laz[pos]*(mid-s+1);
        sum[(pos<<1)|1] = laz[pos]*(t-mid);
        laz[pos<<1] = laz[pos];
        laz[(pos<<1)|1] = laz[pos];
        v[pos<<1] = true;
        v[(pos<<1)|1] = true;
        v[pos] = false;
    }
    return;
}
void Build(int s,int t,int pos)//建立线段树
{
    if(s == t)
    {
        sum[pos] = a[s];
        return;
    }
    int mid = (s+t)>>1;
    Build(s,mid,pos<<1);
    Build(mid+1,t,(pos<<1)|1);
    up(pos);
}
void revise(int l,int r,int s,int t,int pos,ll k)//区间修改
{
    if(l<=s&&r>=t)
    {
        sum[pos] = k*(t-s+1);
        v[pos] = true;
        laz[pos] = k;
        return;
    }
    pd(s,t,pos);
    int mid = (s+t)>>1;
    if(l <= mid) revise(l,r,s,mid,pos<<1,k);
    if(r >= mid + 1) revise(l,r,mid+1,t,(pos<<1)|1,k);
    up(pos);
}
ll getsum(int l,int r,int s,int t,int pos)//区间求和
{
    if(l<=s&&r>=t) return sum[pos];
    pd(s,t,pos);
    ll temp = 0;
    int mid = (s+t)>>1;
    if(l <= mid) temp += getsum(l,r,s,mid,pos<<1);
    if(r >= mid + 1) temp += getsum(l,r,mid+1,t,(pos<<1)|1);
    //注意区间求和不需要调用up()函数,因为没有修改,调用了也没错
    return temp;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n,q,c,x,y;
    ll k;
    cin>>n;
    for (int i = 1;i<=n;i++) cin>>a[i];
    Build(1,n,1);
    cin>>q;
    while(q--)
    {
        cin>>c;
        if(c == 1)
        {
            cin>>x>>y>>k;
            revise(x,y,1,n,1,k);
        }
        else if(c == 0)
        {
            cin>>x>>y;
            cout<<getsum(x,y,1,n,1)<<"\n";
        }
    }
    return 0;
}
