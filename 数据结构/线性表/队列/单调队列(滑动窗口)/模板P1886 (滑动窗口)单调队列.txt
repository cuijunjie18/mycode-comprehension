//背景:看Oi-wiki看不懂(可能是手打双端队列原因),知乎大佬YYDS!
/*适用条件:单调队列是一种主要用于解决滑动窗口类问题的数据结构，即在长度为 n 的序列中，求每个长度为 k 的区间的区间最值。它的时间复杂度是o(n)
          在这个问题中比o(nlogn)的ST表和线段树要优。*/
//时间复杂度:o(n),每个元素入队出队一次
//原理理解:仅保留可能为区间最值的位置,因为不可能为区间最值的没有用了
//数据结构:STL中deque,即双端队列维护
#include <bits/stdc++.h>
using namespace std;
int a[1000001];
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);//加快输入输出
    int n,k;
    cin>>n>>k;//输入数组大小及区间大小
    for (int i = 1;i<=n;i++) cin>>a[i];//依次输入n个数
    deque<int> que;//初始化双端队列,存储位置信息
    for (int i = 1;i<=n;i++)//先处理区间最小值(维护单调上升的队列)
    {
        if(!que.empty()&&i-que.front()>=k) que.pop_front();//超过窗口范围的出队头
        while(!que.empty()&&a[que.back()]>a[i]) que.pop_back();//如果当前数比前一个数小,则前一个数不可能为以后区间的最值了,出队
        que.push_back(i);//当前位置入队
        if(i>=k) cout<<a[que.front()]<<" ";//队头为当前区间最值,输出
    }
    cout<<"\n";
    while(!que.empty()) que.pop_back();//手动清空队列
    for (int i = 1;i<=n;i++)//处理区间最大值(维护单调下降的队列),同最小值理
    {
        if(!que.empty()&&i-que.front()>=k) que.pop_front();
        while(!que.empty()&&a[que.back()]<a[i]) que.pop_back();
        que.push_back(i);
        if(i>=k) cout<<a[que.front()]<<" ";
    }
    return 0;
}
