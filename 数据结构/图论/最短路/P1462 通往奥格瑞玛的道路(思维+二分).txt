//背景:一开始不会,看了标签有二分瞬间会了,看到最大值最小的问题想二分,但是但是我觉得时间复杂度会爆炸,实际上当m<=1e5时,mlogmlogm的时间复杂度能过
//思路:见背景
//原理:最短路 + 二分
//时间复杂度:o(mlogmlogm)
#include <bits/stdc++.h>
using namespace std;
typedef struct edge//最短路的边
{
    int to;
    long long value;
}EDGE;
typedef struct situation//优先队列元素
{
    int u;
    long long d;
}SI;
struct cmp//优先队列自定义比较
{
    bool operator()(SI x,SI y)
    {
        return x.d > y.d;
    }
};
int f[10001];//每个城市的收费
vector<EDGE> e[10001];//邻接表存图
int n,m,x,y,c,maxn = 0,minn = 1e9;//常规变量
long long b;//初始血量
bool check(int k)
{
    if(k<f[1]) return false;//!!!!Hack数据,第一点自己也要判定,但它的收费超过了我二分答案的最大收费,直接不符合条件
    //下面是标准跑Dijkstra
    bool vis[n+1];
    long long dis[n+1];
    memset(dis,0x3f,sizeof(dis));
    memset(vis,0,sizeof(vis));
    priority_queue<SI,vector<SI>,cmp> que;
    dis[1] = 0;
    que.push({1,0});
    while(!que.empty())
    {
        int x = que.top().u;
        que.pop();
        if(vis[x]) continue;
        vis[x] = true;
        for (auto v:e[x])
        {
            if(f[v.to] > k) continue;//当城市的收费超过二分答案的最大值时,不能用
            if(dis[v.to] > dis[x] + v.value)
            {
                dis[v.to] = dis[x] + v.value;
                que.push({v.to,dis[v.to]});
            }
        }
    }
    //cout<<k<<" "<<dis[n]<<"\n";
    if(dis[n] <= b) return true;//如果满足二分答案下的路径剪掉的血量不超过初始化血量,该最短路满足条件
    else return false;//否则false
}
void Solve()
{
    cin>>n>>m>>b;//输入城市个数,边数,及血量数
    for (int i = 1;i<=n;i++)//输入每个城市的收费
    {
        cin>>f[i];
        maxn = max(maxn,f[i]);//取大值
        minn = min(minn,f[i]);//取小值
    }
    for (int i = 1;i<=m;i++)//建无向图
    {
        cin>>x>>y>>c;
        e[x].push_back({y,c});
        e[y].push_back({x,c});
    }
    long long ans = 0;//初始化答案
    //对路径的最大值答案二分
    int l = minn;//二分的左端点
    int r = maxn;//二分的右端点
    while(l<=r)//二分
    {
        int mid = (l+r)>>1;
        if(check(mid))//判断
        {
            ans = mid;//记录答案
            r = mid - 1;//继续缩小答案
        }
        else l = mid + 1;
    }
    if(!ans) cout<<"AFK"<<"\n";//如果无解
    else cout<<ans<<"\n";//有解
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    while(t--)
    {
        Solve();
    }
    return 0;
}
