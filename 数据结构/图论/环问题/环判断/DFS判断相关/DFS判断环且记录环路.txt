//背景:做题过程发现问题,判断简单无向图中是否存在环该怎么处理?
//思考:怎么能记录环路?该份代码给出解答,可能会有错误,但是目前未知
//原理:我的DFS判断简单图是否有环(简单图没有自环),可能会有错误!
//更新:其实还是并查集判断环好,然后再DFS找环方便(在线做法输入,处理并查集的时候知道了环上的两点,可用简洁办法)
#include <bits/stdc++.h>
using namespace std;
const int maxn = 100005;
int parent[maxn+1];
vector<int> cycle;
bool vis[maxn+1];//标记数组
vector<int> e[maxn+1];//邻接表存图
bool flag = false;//判断依据
void DFS(int x,int fa)
{
    if(flag) return;//如果已经找到了,一定要返回,否则可能会有重复入环数组
    parent[x] = fa;
    vis[x] = true;//标记
    for (int i = 0,big = e[x].size();i<big;i++)
    {
        if(e[x][i] == fa) continue;//特判父亲,父亲的回路不算的
        if(vis[e[x][i]])//如果有指向之前已经标记节点的回路(一定违反了树的性质,而不是树就一定有环),有环,返回
        {
            int temp = e[x][i];//获取临界交界处
            int tx = x;//存储x,防止操作改变了x
            //cout<<666<<"\n";
            cycle.push_back(x);
            cycle.push_back(temp);
            //cout<<x<<"\n";
            //cout<<temp<<"\n";
            while(parent[tx]&&parent[tx] != temp)//寻找到断开为止,可能是没有了或者到了原先成环的交界处
            {
                tx = parent[tx];
                cycle.push_back(tx);
                //cout<<tx<<"\n";
            }
            flag = true;
        }
        //如果上面的找到了,那么下面的一旦进入就会直接退出
        DFS(e[x][i],x);//否则继续DFS(注意这里不要让x变,虽然不影响,但是逻辑错误)
        if(flag) return;//(因为上一次的返回是从这里出来的,所以要在这里返回,不要写在了上面)找到环并记录后,终止一切行为,防止重复搜索
    }
}
void Solve()
{
    int n,m,x,y;
    cin>>n>>m;
    for (int i = 1;i<=m;i++)//建立无向图
    {
        cin>>x>>y;
        e[x].push_back(y);
        e[y].push_back(x);
    }
    for (int i = 1;i<=n;i++)
    {
        if(flag == false&&vis[i] == false)//仅对还没标记的点进行DFS判断且此时还没有环
        {								  //因为图不一定连通,所以可能不同连通块中可能有环
            DFS(i,0);//获取标记
        }
    }
    if(flag)
    {
        cout<<"The Graph has cycle!"<<"\n";//有环
        for (auto v:cycle) cout<<v<<" ";
        cout<<"\n";
    }
    else cout<<"The Graph has no cycle!"<<"\n";//无环
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    while(t--)
    {
        Solve();
    }
    return 0;
}
/*
测试用例1:
5 5
1 2
1 3
2 3
1 4
4 5
*/
/*测试用例2:
6 6
1 2
2 3
3 4
4 5
5 6
2 5
*/
