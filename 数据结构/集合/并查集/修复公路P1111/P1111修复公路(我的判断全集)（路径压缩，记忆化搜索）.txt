//时间复杂度:o(n*m)
#include <stdio.h>
#include <stdlib.h>
typedef struct data
{
    int x;
    int y;
    int times;
}DATA;
int f[1001];
void Sort(DATA a[],int begin,int end);
int Finish(int n);
int Find(int x);
void Join(int x,int y);
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    DATA data[m+1];
    for (int i = 1;i<=n;i++)
    {
        f[i] = i;
    }
    for (int i = 1;i<=m;i++)
    {
        scanf("%d%d%d",&data[i].x,&data[i].y,&data[i].times);
    }
    Sort(data,1,m);
    for (int i = 1;i<=m;i++)
    {
        Join(data[i].x,data[i].y);
        if(Finish(n))
        {
            printf("%d",data[i].times);
            return 0;
        }
    }
    printf("-1");
    return 0;
}

void Sort(DATA a[],int begin,int end)
{
    if(begin>=end) return;
    DATA temp = a[begin];
    int i = begin;
    int j = end;
    while(i<j)
    {
        while(a[j].times>=temp.times&&j>i) j--;
        while(a[i].times<=temp.times&&i<j) i++;
        if(i!=j)
        {
            DATA save = a[i];
            a[i] = a[j];
            a[j] = save;
        }
    }
    a[begin] = a[i];
    a[i] = temp;
    Sort(a,begin,i-1);
    Sort(a,i+1,end);
}

int Finish(int n)
{
    int flag = 1;
    for (int i = 1;i<=n-1;i++)
    {
        for (int j = i+1;j<=n;j++)
        {
            if(Find(i) != Find(j))
            {
                flag = 0;
                goto EXIT;
            }
        }
    }
    EXIT:
        return flag;
}

int Find(int x)
{
    if(x == f[x]) return x;
    else return f[x] = Find(f[x]);
}

void Join(int x,int y)
{
    int f1 = Find(x);
    int f2 = Find(y);
    if(f1 != f2)
    {
        f[f2] = f1;
    }
}