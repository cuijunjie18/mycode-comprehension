//背景:类似银河战舰那道题
//原理:带权的并查集,本题中权值均为1(狭义上的)
#include <bits/stdc++.h>
using namespace std;
const int n = 30000;//记录总编号数,为常量
int f[30001];//并查集父节点数组
int d[30001];//某节点到其祖先的距离(过程中可能只是到父节点,不一定是真正的祖先,通过查找过程的路径压缩来得到真正的到祖先的距离)
int big[30001];//记录集合的大小
int p;//操作次数
int Find(int x)//并查集查找加路径压缩,细节满满加改变距离
{
    if(x == f[x]) return x;//如果是祖先,返回且不进行下面操作
    int k = Find(f[x]);//先找到祖先!!!(一定不要先改变了f[x],因为当前点还要借助父亲去改变距离的,否则最后全为d[x] += d[祖先])
    d[x] += d[f[x]];//借助父节点改变距离
    return f[x] = k;//返回加路径压缩
}
void Join(int x,int y)//合并集合,注意x在左,y在右
{
    int f1 = Find(x);//先找祖先
    int f2 = Find(y);
    f[f1] = f2;//合并
    d[f1] = big[f2];//原本的f1是祖先,故无距离,现在变成了父亲,其到根节点距离为(原来的)f2的集合大小
    big[f2] += big[f1];//改变集合大小
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);//解除同步,加快输入输出
    for (int i = 1;i<=n;i++)//并查集初始化
    {
        f[i] = i;
        big[i] = 1;//大小初始化为1
    }
    cin>>p;//输入操作次数
    char ch;
    int x,y;
    while(p--)//依次处理p次操作
    {
        cin>>ch;
        if(ch == 'M')//如果是合并
        {
            cin>>x>>y;
            Join(x,y);//切记x在左,y在右
        }
        else if(ch == 'C')//如果是查询
        {
            cin>>x;
            int temp = Find(x);//一定要先调用一次查找操作在输出,确保是到祖先距离而不是父亲距离
            cout<<d[x]<<"\n";//输出
        }
    }
    return 0;
}
