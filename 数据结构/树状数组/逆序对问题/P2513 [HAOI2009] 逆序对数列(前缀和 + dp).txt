// 背景：逆序对 + dp问题
#include <bits/stdc++.h>
using namespace std;
const int md = 1e4;
int dp[1005][1005]; // 包含i个数的全排列，逆序对数量为j的方案数
int sum[1005][1005];
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n,k;
    cin >> n >> k;
    dp[0][0] = 1; // 初始化 
    for (int i = 1; i <= n; i++){
        sum[i - 1][0] = dp[i - 1][0];
	// 为了少判上界，所以上一次的最多逆序对扩充到当前最多逆序对
        for (int j = 1; j <= min(k, i * (i - 1)/ 2); j++) sum[i - 1][j] = (sum[i - 1][j - 1] + dp[i - 1][j]) % md;
        for (int j = 0; j <= min(k,i * (i - 1)/2); j++){
            if (j - (i - 1) - 1 < 0) dp[i][j] = sum[i - 1][j]; // 特判了下界
            else dp[i][j] = (sum[i - 1][j] - sum[i - 1][j - (i - 1) - 1] + md) % md; // 不用判上界
        }
    }
    cout << dp[n][k] << "\n";
    return 0;
}