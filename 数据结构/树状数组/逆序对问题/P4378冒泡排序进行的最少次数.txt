//背景:树状数组维护逆序对水题
//思路:冒泡排序进行的次数即某个数产生的最大逆序对数
#include <bits/stdc++.h>
using namespace std;
int n;
int sum[100001];
int lowbit(int x)
{
    return x&(-x);
}
void add(int x)
{
    while(x<=n)
    {
        sum[x]++;
        x += lowbit(x);
    }
}
int getsum(int x)
{
    int temp = 0;
    while(x)
    {
        temp += sum[x];
        x -= lowbit(x);
    }
    return temp;
}
void Solve()
{
    set<int> s;
    map<int,int> check;
    cin>>n;
    int a[n+1];
    int cnt = 0;
    int ans = 0;
    for (int i = 1;i<=n;i++)
    {
        cin>>a[i];
        s.insert(a[i]);
    }
    for (auto v:s) check[v] = ++cnt;
    for (int i = 1;i<=n;i++)
    {
        int pos = check[a[i]];
        ans = max(ans,getsum(n)-getsum(pos));
        add(pos);
    }
    cout<<ans+1<<"\n";//注意要多输出1
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    while(t--)
    {
        Solve();
    }
    return 0;
}