//背景:性质及各类证明太多,具体见OIwiki

函数一:lowbit(),作用:阶段x最低位1(包含)后所代表的数
时间复杂度:o(1)
int lowbit(int x) 
{
  // x 的二进制中，最低位的 1 以及后面所有 0 组成的数。
  // lowbit(0b01011000) == 0b00001000
  //          ~~~~^~~~
  // lowbit(0b01110010) == 0b00000010
  //          ~~~~~~^~
     return x & -x;
}



函数二:getsum(),作用:区间和查询,查找[1,i]的和
时间复杂度:o(logn)
int getsum(int x) 
{  
  //a[1]..a[x]的和
    int ans = 0;
    while (x > 0) 
    {
      ans = ans + c[x];
      x = x - lowbit(x);
    }
    return ans;
}
注意:若求[x,y]区间和,可以等于sum[y] - sum[x-1],前缀和思想



函数三:add(),作用:单点修改,修改包含了a[x]的管辖数组
//时间复杂度:o(logn)
void add(int x, int k) 
{
    while (x <= n)//不能越界
    {  
      c[x] = c[x] + k;
      x = x + lowbit(x);
    }
}
注意:若单点修改为替换值或者乘除,自己分析



函数四:Build(),直接当成每个点均初始化为0时的单点修改操作
时间复杂度:o(nlogn)