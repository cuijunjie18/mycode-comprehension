//背景:比赛中15分钟做出,数学建模成树的重心
//原理:带权树的重心
#include <bits/stdc++.h>
using namespace std;
typedef struct edge//边结构体
{
    int to,next;
}EDGE;
EDGE e[100001<<1];
int head[100001];
int cnt;
long long c[100001];//点权
long long big[100001];//以i为根节点树的大小
long long m[100001];//i的最大子树的大小
long long all;//记录整棵树的大小
int n;//节点数
int p;//重心编号
long long ans;//答案
void add(int x,int y)//加边
{
    e[++cnt].to = y;
    e[cnt].next = head[x];
    head[x] = cnt;
}
void DFS(int x,int fa)//找重心
{
    big[x] = c[x];//初始化子树大小
    for (int i = head[x];i;i = e[i].next)//遍历子树
    {
        if(e[i].to == fa) continue;
        DFS(e[i].to,x);//先至底
        big[x] += big[e[i].to];//累加大小
        m[x] = max(m[x],big[e[i].to]);//找最大子树
    }
    m[x] = max(m[x],all-big[x]);//取最大连通块
    if(m[x] <= all/2) p = x;//判断重心
}
void Solve(int x,int fa,int d)//计算答案,d为深度(即距离)
{
    ans += c[x]*d;//累加答案
    for (int i = head[x];i;i = e[i].next)//遍历子树
    {
        if(e[i].to == fa) continue;
        Solve(e[i].to,x,d+1);
    }
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);//加快输入输出
    int x,y;
    cin>>n;
    for (int i = 1;i<=n-1;i++)//建树
    {
        cin>>x>>y;
        add(x,y);
        add(y,x);
    }
    for (int i = 1;i<=n;i++)//计算整棵树的大小
    {
        cin>>c[i];
        all += c[i];
    }
    DFS(1,0);//找重心
    Solve(p,0,0);//计算答案
    cout<<ans<<"\n";//输出
    return 0;
}
