//法一：分开
//原理：由公式推出了满足johnson法则的不等式
#include <bits/stdc++.h>
#define ll long long
using namespace std;
struct node1
{
    ll l,r;
};
struct node2
{
    ll l,r;
};
bool cmp1(node1 x,node1 y){return x.l < y.l;} // 取等号就错了
bool cmp2(node2 x,node2 y){return x.r > y.r;}
void Solve()
{
    int n;
    ll l,r;
    cin >> n;
    vector<node1> M1;
    vector<node2> M2;
    for (int i = 1; i <= n; i++)
    {
        cin >> l >> r;
        if (l <= r) M1.push_back({l,r});
        else M2.push_back({l,r});
    }
    sort(M1.begin(),M1.end(),cmp1);
    sort(M2.begin(),M2.end(),cmp2);
    ll ans = 0;
    ll sum = 0;
    ll b = 0;
    for (auto v : M1)
    {
        sum += v.l;
        b = max(b,sum) + v.r;
        ans = max(ans,b);
    }
    for (auto v : M2)
    {
        sum += v.l;
        b = max(b,sum) + v.r;
        ans = max(ans,b);
    }
    cout << ans << "\n";
    return;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin >> t;
    while (t--)
    {
        Solve();
    }
    return 0;
}


//法二：引入d排序数组
#include <bits/stdc++.h>
#define ll long long
#define MAXN 200005
using namespace std;
int d[MAXN];
struct node
{
    ll l,r;
    int pos;
};
bool cmp(node x,node y)
{
    if (d[x.pos] == d[y.pos])
    {
        if (d[x.pos] <= 0) return x.l < y.l;
        else return x.r > y.r;
    }
    return d[x.pos] < d[y.pos];
}
void Solve()
{
    int n;
    cin >> n;
    node p[n+1];
    for (int i = 1; i <= n; i++)
    {
        cin >> p[i].l >> p[i].r;
        p[i].pos = i;
        if (p[i].l < p[i].r) d[i] = -1;
        else if (p[i].l == p[i].r) d[i] = 0;
        else if (p[i].l > p[i].r) d[i] = 1;
    }
    sort(p+1,p+n+1,cmp);
    ll ans = 0;
    ll sum = 0;
    ll b = 0;
    for (int i = 1; i <= n; i++)
    {
        sum += p[i].l;
        b = max(b,sum) + p[i].r;
        ans = max(ans,b);
    }
    cout << ans << "\n";
    return;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin >> t;
    while (t--)
    {
        Solve();
    }
    return 0;
}
