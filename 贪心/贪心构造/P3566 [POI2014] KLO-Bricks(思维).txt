//背景：暑假训练，思维题，输出是真的坑，不能换行，不能空格
//思路：每次选取最多的颜色进行填位置，数量相同优先填与最后一个位置相同的颜色
//收获：优先队列的自定义应用
#include <bits/stdc++.h>
using namespace std;
int n,s,e,sum;
struct node
{
    int c; // 颜色
    int t; // 数量
};
struct cmp
{
    bool operator()(node x,node y) // 自定义排序
    {
        if (x.t == y.t)
        {
            return x.c != e; // 结尾颜色优先
        }
        return x.t < y.t;
    }
};
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    priority_queue<node,vector<node>,cmp> que;
    cin >> n >> s >> e;
    int times[n+1];
    for (int i = 1; i <= n; i++)
    {
        cin >> times[i];
        sum += times[i];
    }
    for (int i = 1; i <= n; i++)
    {
        if (times[i] > (sum+1)/2) // 判断无解1
        {
            cout << 0;
            return 0;
        }
        if (i == s) times[i]--;
        if (i == e) times[i]--;
        if (times[i] < 0) // 判断无解2
        {
            cout << 0;
            return 0;
        }
        if (times[i] > 0) que.push({i,times[i]}); // 记住要大于0才入队，不然影响后面无解判断
    }
    int ans[sum+1];
    ans[1] = s;
    ans[sum] = e;
    for (int i = 2; i <= sum-1; i++)
    {
        node temp1 = que.top();
        que.pop();
        if (temp1.c == ans[i-1]) // 与前一个颜色相同
        {
            if (que.empty()) // 无解判断
            {
                cout << 0;
                return 0;
            }
            node temp2 = que.top();
            que.pop();
            ans[i] = temp2.c;
            que.push(temp1); // 入队
            temp2.t--;
            if (temp2.t > 0) que.push(temp2); // 判断
        }
        else
        {
            ans[i] = temp1.c;
            temp1.t--;
            if (temp1.t > 0) que.push(temp1); // 判断
        }
    }
    if (!que.empty()) // 无解判断3
    {
        cout << 0;
        return 0;
    }
    if (ans[sum-1] == ans[sum]) // 无解判断4
    {
        cout << 0;
        return 0;
    }
    // 特殊输出答案
    for (int i = 1; i <= sum-1; i++) cout << ans[i] << " ";
    cout << ans[sum];
    return 0;
}
/*
3 3 1
2 3 3
*/
