//！！！注意0不算有前导零，单位数都是windy数
#include <bits/stdc++.h>
using namespace std;
int num[11];//记录上界每一位数字
int f[12][12];//一维：当前dp到第几位了；二维：当前位前一个数字是多少
int DFS(int len,bool limit,bool zero,int head)//核心dp函数
{
    if(len == 0) return 1;//填完数字了，说明该数字符合windy数定义，返回1，代表增加1个数
    if(!limit &&!zero && f[len][head] != 0) return f[len][head];//如果当前状态已经计算过了，直接返回
    int up = limit?num[len]:9;//确定当前位在该状态下的上界
    int ret = 0;
    if(zero)//如果有前导零，后面还可以任意选
    {
        for (int i = 0;i<=up;i++)
        {
            ret += DFS(len-1,limit&&(i == num[len]),(zero&&i == 0),i);
        }
    }
    else//没有前导零，要受前面数限制
    {
        for (int i = 0;i<=up;i++)
        {
            if(abs(i-head) >=2)//windy数定义
            {
                ret += DFS(len-1,limit&&(i == num[len]),false,i);
            }
        }
    }
    if(!limit&&!zero) f[len][head] = ret;//如果没有限制且没有前导零，记忆化
    return ret;
}
int Solve(int up)
{
    int len = 0;
    while(up)
    {
        num[++len] = up%10;
        up /= 10;
    }
    return DFS(len,true,true,0);
}
int main()
{
    int a,b;
    scanf("%d%d",&a,&b);
    printf("%d\n",Solve(b) - Solve(a-1));
    return 0;
}
