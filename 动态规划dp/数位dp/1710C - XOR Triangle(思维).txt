//背景：暑假训练，数位dp思维题，相当于复习了一下数位dp
/*思路：x = a^b，y = a^c，z = b^c，观察 x^y^z = 0，那么x + y > z 等价于 x + y > z = x^y，而加法显然大于等于异或（不进位加法），当只要不全0均可去等号；
       题目即要求满足x + y > z，x + z > y，y + z > x，即当数位dp的约束条件
*/
#include <bits/stdc++.h>
#define ll long long
#define MAXN 200005
using namespace std;
const int md = 998244353;
ll dp[MAXN][2][2][2][2][2][2]; // 第一维为数位,后面则是a,b,c选择是否有限制，后面是x+y,x + z,y + z 是否满足不是0
string s;
int n;
ll DFS(int pos,bool a,bool b,bool c,int s1,int s2,int s3)
{
    if (pos == n + 1) // 到结尾了
    {
        return s1&&s2&&s3; // 全部不是0才有贡献
    }
    if (dp[pos][a][b][c][s1][s2][s3] >= 0) return dp[pos][a][b][c][s1][s2][s3]; // 记忆化搜索
    ll res = 0; // 初始化此次搜索的答案
    for (int i = 0; i <= (a?(s[pos] - '0'):1); i++) // a，判断限制
    {
        for (int j = 0; j <= (b?(s[pos] - '0'):1); j++) // b，同理
        {
            for (int k = 0; k <= (c?(s[pos] - '0'):1); k++) // c，同理
            {
                int temp_a = a&(i == s[pos] - '0'); // 计算下一位是否有限制
                int temp_b = b&(j == s[pos] - '0');
                int temp_c = c&(k == s[pos] - '0');
                int x = i^j;
                int y = i^k;
                int z = j^k;
                int temp_s1 = s1|(x&y); // 判断x + y是否还是0
                int temp_s2 = s2|(x&z);
                int temp_s3 = s3|(y&z);
                res = (res + DFS(pos+1,temp_a,temp_b,temp_c,temp_s1,temp_s2,temp_s3))%md; // 累加计算
            }
        }
    }
    dp[pos][a][b][c][s1][s2][s3] = res; // 记忆化记录
    return res%md; // 返回
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> s;
    n = s.size();
    s = " " + s;
    memset(dp,-0x3f,sizeof(dp)); // 初始化负无穷，表示没有搜索过
    cout << DFS(1,1,1,1,0,0,0) << "\n";
    return 0;
}
