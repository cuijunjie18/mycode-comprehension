//！！！！超难理解
//时间复杂度:o(nlogn) 贪心加二分
#include <bits/stdc++.h>
using namespace std;
//!!!!注意对于有负数的序列,low[0]应特殊处理,初始化为最小,防止low[1]都大于当前数的情况(附一组数据 20 100 10 12 5 13)
int low[5001];//长度为i的子序列的最后一个数的最小值(因为长度越长，显然最后一个数越大，故是low数组单调上升，可以二分)
int maxl = 1;//最大长度
int Myupperbound(int x)//二分查找第一个(第一个同样是为了保证上升)大于等于(如果是大于则不能保证是上升序列)x的low，并返回其长度
{
    int l = 1;//一定要下界为1
    int r = maxl;//上界为当前最大长度
    int ans = 0;//答案初始化为0
    while(l<=r)//二分
    {
        int mid = (l+r)/2;
        if(low[mid]>=x)//如果大于等于x，则说明该位置x可以替换，使得同样长度下，最后一个数更小，更有利于后接其他数
        {
            ans = mid;//记录可能的答案
            r = mid-1;//缩小上界
        }
        else
        {
            l = mid+1;//提高下界
        }
    }
    return ans;//返回
}
int main()
{
    int n;
    cin>>n;//输入数字个数
    int number[n+1];
    for (int i = 1;i<=n;i++)//输入每个数字
    {
        cin>>number[i];
    }
    low[1] = number[1];//初始化，长度为1时最小数为number[1]
    for (int i = 2;i<=n;i++)//dp
    {
        if(number[i]>low[maxl])//如果当前数可以接上最大长度
        {
            maxl++;//最大长度加1
            low[maxl] = number[i];//最大长度的最后一个数最小为当前数
        }
        else//如果接不上，就去找其最合适接的地方(贪心)
        {
            low[Myupperbound(number[i])] = number[i];//改变长度为Myupperbound(number[i])的最后一个数的最小值，便于后面接
            /*   int* x = lower_bound(low+1,low+maxl+1,number[i]);
                 *x = number[i]; 这样用二分比手打效率高，返回的是地址，故应用指针去接收*/
             
        }
    }
    cout<<maxl<<endl;//输出答案
    return 0;
}


//另一种好看的解法:
void Solve()
{
    int n,x;
    cin>>n;
    int low[n+1];
    memset(low,0,sizeof(low));
    int ans = 0;
    for (int i = 1;i<=n;i++)
    {
        cin>>x;
        if(x > low[ans])
        {
            ans++;
            low[ans] = x;
        }
        else
        {
            int p = lower_bound(low+1,low+ans+1,x) - low;
            low[p] = x;
        }
    }
    cout<<ans<<"\n";
}
