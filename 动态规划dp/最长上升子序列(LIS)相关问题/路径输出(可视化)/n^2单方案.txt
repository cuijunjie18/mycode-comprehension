//背景:被abc360-G题启发,找出LIS的序列
//注:当前版本为输出一种满足条件的方案
//时间复杂度:o(n^2)
#include <bits/stdc++.h>
using namespace std;
int a[5005];
int dp[5005];
int link[5005];//初始化全部为0默认为没有前驱
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n;
    cin>>n;
    for (int i = 1;i<=n;i++) cin>>a[i];
    dp[1] = 1;//初始化
    int ans = 1;//初始化答案
    int b = 1;//初始化最长长度
    for (int i = 2;i<=n;i++)//dp
    {
        dp[i] = 1;//初始化
        for (int j = 1;j<=n-1;j++)//正着倒着相关松弛性(想要松弛的话就正着,松弛即方案中每个元素距离最远)   新:好像错误!
        {
            if(a[i] > a[j]&&dp[j] + 1 > dp[i])//仅更新严格最优的
            {
                dp[i] = dp[j] + 1;
                link[i] = j;//更新前驱
            }
        }
        if(dp[i] > ans)//如果是最长
        {
            ans = dp[i];//更新最长答案
            b = i;//记录
        }
    }
    stack<int> s;//记录路径
    while(b)//直到无前驱
    {
        s.push(a[b]);
        b = link[b];
    }
    while(!s.empty())//巧妙的做法,实现reverse输出
    {
        cout<<s.top()<<" ";
        s.pop();
    }
    return 0;
}
