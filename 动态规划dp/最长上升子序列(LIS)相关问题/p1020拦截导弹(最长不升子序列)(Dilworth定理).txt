//原理:Dilworth定理
//时间复杂度:o(nlogn) 两次求最长上升子序列的时间
#include <bits/stdc++.h>
using namespace std;
int low[100001];//维护的贪心数组
int number[100001];//高度数组
int m;//最大长度
int Search1(int m,int x)//查找low里面的第一个小于x的数的位置
{
    int l = 1;//下界为1
    int r = m;/上界为当前最大长度
    int ans = 0;//初始化答案
    while(l<=r)//标准二分
    {
        int mid = (l+r)>>1;
        if(low[mid]<x)//如果小于，满足条件
        {
            ans = mid;//记录位置
            r = mid - 1;//缩小上界
        }
        else l = mid + 1;//否则提高下界
    }
    return ans;//返回
}
int main()
{
    int n = 0;//初始化导弹个数
    while(scanf("%d",&number[++n])!=EOF);//处理未知输入个数的方法，最后n多加了一次
    n--;//减去多加的一次
    low[1] = number[1];//初始化
    m = 1;//初始化长度，至少为1
    for (int i = 2;i<=n;i++)//求最长单调不升子序列的长度
    {
        if(number[i]<=low[m])//如果可以接上
        {
            m++;//最长长度加1
            low[m] = number[i];//更新最大的最后一个数
        }
        else//如果接不上，贪心找最适合的位置让它插入更新
        {
            low[Search1(m,number[i])] = number[i];//插在第一个小于它的数的位置，更新
        }
    }
    printf("%d\n",m);//输出答案
    memset(low,0,sizeof(low));//重新用初始化low，用于求最长上升子序列
    low[1] = number[1];//初始化
    m = 1;//初始化最大长度，至少为1
    for (int i = 2;i<=n;i++)//求最长上升子序列的长度
    {
        if(number[i]>low[m])//如果可以接上
        {
            m++;//最大长度加1
            low[m] = number[i];//更新最小的最后一个数
        }
        else//如果接不上，贪心找最合适的位置让它插入更新
        {
            int *x = lower_bound(low+1,low+m+1,number[i]);//此次用c++内置函数找第一个大于等于它的位置，因为返回为地址，用指针接收
            *x = number[i];//更新，因为是调用地址，故改变了low数组
        }
    }
    printf("%d\n",m);//输出答案
    return 0;
}
