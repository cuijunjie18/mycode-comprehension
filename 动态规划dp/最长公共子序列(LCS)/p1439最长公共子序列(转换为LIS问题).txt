//适用条件:两个序列元素互异且相同,便可以转化为LIS问题
/*我的解释:map记录下b[]的每个元素的位置,然后利用a[]得到一个在b中对应元素的位置序列cvt[],为什么可以转化为LIS问题呢?
  不妨以a[5] = [3 2 1 4 5],b[5] = [1 2 3 4 5],得到的cvt数组为cvt[5] = [3,2,1,4,5],当然你a,b数组可以反着来操作,无所谓
  不妨取cvt中对应一个位置为假设LCS的起点,因为LCS是按顺序来的,那么比起点小的位置均无效,那么除去该起点及所有比起点小的位置,剩下的
  情况转换成了一个子问题重复,故动态规划解.而起点又又多个选择,故变成找最长的上升子序列了.故LCS->LIS合理*/
#include <bits/stdc++.h>
using namespace std;
unordered_map<int,int> b;//用哈希表不一定有红黑树快,对于可能卡哈希的,而红黑树一定过的,优先用红黑树(acmer的严谨,我这里不管)
int a[100001];//a数组
int cvt[100001];//转换得到的cvt数组
int low[100001];//长度为i的LIS的最后一个数的最小值
int m = 0;//LIS最大长度,初始化为0
int Find(int x)//二分查找
{
    int ans = 0;//初始化答案
    int l = 0;
    int r = m;
    while(l<=r)//二分
    {
        int mid = (l+r)>>1;
        if(low[mid] >= x)//一定要等于,否则就不满足LIS性质了(即单调上升,可能会导致单调不减)
        {
            ans = mid;
            r = mid - 1;
        }
        else l = mid + 1;
    }
    return ans;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);//加快输入输出
    memset(low,-127,sizeof(low));//low数组初始化为负无穷,防止新的数比low[1]还小的情况的Hack!(自己感悟)
    int n,x;
    cin>>n;//输入数量
    for (int i = 1;i<=n;i++) cin>>a[i];//输入a数组
    for (int i = 1;i<=n;i++)//处理b数组
    {
        cin>>x;
        b[x] = i;//记下位置
    }
    for (int i = 1;i<=n;i++)//生成cvt数组
    {
        cvt[i] = b[a[i]];
    }
    for (int i = 1;i<=n;i++)//LIS模板
    {
        if(cvt[i]>low[m]) low[++m] = cvt[i];//直接接上
        else
        {
            int p = Find(cvt[i]);
            low[p] = cvt[i];//更新位置最小值
        }
    }
    cout<<m<<"\n";//输出答案,即LIS长度
    return 0;
}
