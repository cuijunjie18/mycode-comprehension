//背景：主席树维护区间种类，四边形优化区间拆分dp
#include <bits/stdc++.h>
#define MAXN 35005
using namespace std;
int c[MAXN];
int dp[MAXN][51];
int pos[MAXN][51];
int rt[MAXN<<5];
int sum[MAXN<<5],ls[MAXN<<5],rs[MAXN<<5];
int tot;
int vis[MAXN];
int update(int root,int l,int r,int pos,int k)
{
    int dir = ++tot;

    ls[dir] = ls[root];
    rs[dir] = rs[root];
    sum[dir] = sum[root];

    if (l == r)
    {
        sum[dir] += k;
        return dir;
    }

    int mid = (l + r) >> 1;
    if (pos <= mid) ls[dir] = update(ls[root],l,mid,pos,k);
    else rs[dir] = update(rs[root],mid + 1,r,pos,k);
    sum[dir] = sum[ls[dir]] + sum[rs[dir]];

    return dir;
}
int query(int root,int l,int r,int s,int t)
{
    if (l <= s && r >= t) return sum[root];
    int mid = (s+t) >> 1;
    int ans = 0;
    if (l <= mid) ans += query(ls[root],l,r,s,mid);
    if (r >= mid + 1) ans += query(rs[root],l,r,mid + 1,t);
    return ans;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n,k;
    cin >> n >> k;
    for (int i = 1; i <= n; i++)
    {
        cin >> c[i];
        rt[i] = update(rt[i-1],1,n,i,1);
        if (vis[c[i]]) rt[i] = update(rt[i],1,n,vis[c[i]],-1);
        vis[c[i]] = i;
    }
    for (int i = 1; i <= n; i++)
    {
        dp[i][1] = query(rt[i],1,i,1,n);
        pos[i][1] = 0;
        cout << dp[i][1] << " ";
    }
    return 0;
    for (int len = 2; len <= k; len++)
    {
        pos[n+1][len] = n;
        for (int i = n; i >= 1; i--)
        {
            for (int j = pos[i][len-1]; j <= pos[i+1][len]; j++)
            {
                int ans = 0;
                if (dp[i][len] < dp[j-1][len-1] + ans)
                {
                    dp[i][len] = dp[j-1][len-1] + ans;
                    pos[i][len] = j;
                }
            }
        }
    }
    cout << dp[n][k] << "\n";
    return 0;
}
/*
4 1
1 2 2 1
*/

/*
7 2
1 3 3 1 4 4 4
*/

//1 1 1 2 2 1 3 1 1 2