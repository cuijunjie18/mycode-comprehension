#include <bits/stdc++.h>
using namespace std;
int n,m,k;//n为菜的个数，m为要吃多少道菜，k为有多少个特殊规则
long long f[1<<18][20];//某状态下最后吃的是第i道菜的最大满意度
int a[20];//吃第i道菜的满意度
int other[20][20];//规则，吃完第i道菜后接着吃第j道菜会额外获得的满意度
long long ans;//答案，初始化为0
int check(int x)//计算某状态下二进制1的个数，即求已经吃了多少道菜，还可以用c++内置函数__builtin_popcount();
{
    int test[2];//计数数组
    test[0] = 0;//0个数初始化为0
    test[1] = 0;//1个数初始化为0
    do
    {
        test[x%2]++;//计算0与1个数
        x /= 2;//位移
    }while(x!=0);
    return test[1];//返回1的个数
}
int main()
{
    cin>>n>>m>>k;//输入菜个数，吃的个数，规则数
    for (int i = 1;i<=n;i++)//依次输入每道菜的满意度
    {
        cin>>a[i];
    }
    int x,y;
    for (int i = 1;i<=k;i++)//依次输入k个规则
    {
        cin>>x>>y;
        cin>>other[x][y];
    }
    for (int i = 1;i<=n;i++)//初始化吃一道菜的满意度
    {
        f[1<<(i-1)][i] = a[i];
    }
    for (int t = 1;t<=(1<<n)-1;t++)//枚举状态
    {
        int temp = check(t);//计算该状态下吃了多少道菜
        if(temp>m) continue;//如果大于m，不合法，跳过
        else if(temp == m)//如果刚好等于m
        {
            for (int i = 1;i<=n;i++)//枚举该状态下的不同顺序下获得的最大满意度
            {
                if(t&(1<<(i-1)))//菜包含在这个状态下
                    ans = max(ans,f[t][i]);//取最大值
            }
        }
        else//如果没吃够m道菜
        {
            for (int i = 1;i<=n;i++)//枚举要吃的
            {
                if(t&(1<<(i-1))) continue;//如果已经吃过了，跳过
                for (int j = 1;j<=n;j++)//枚举该状态下前一道菜
                {
                    if(t&(1<<(j-1)))//如果包含在该状态下
                    {
                        f[t+(1<<(i-1))][i] = max(f[t+(1<<(i-1))][i],f[t][j] + a[i] + other[j][i]);//取最大值
                    }
                }
            }
        }
    }
    cout<<ans<<endl;//输出
    return 0;
}