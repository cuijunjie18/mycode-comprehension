#include <bits/stdc++.h>
using namespace std;
int s[101];//记录地形
int g[70];//记录一行可放置的情况，里面数据为二进制放置情况！！大大压缩了数组，由1<<m变成常数级别
int f[101][70][70];//压缩两行，第一维代表当前枚举到了第几行，2维代表这一行状态，3维代表上一行状态，为最多炮兵个数
int ans;
int main()
{
    int n,m;
    char ch;
    scanf("%d%d",&n,&m);
    for (int i = 1;i<=n;i++)//记录地形
    {
        for (int j = 1;j<=m;j++)
        {
            scanf(" %c",&ch);
            if(ch == 'P')
            {
                s[i] = (s[i]<<1) + 1;//关键压缩
            }
            else
            {
                s[i] <<= 1;
            }
        }
    }
    int cnt = 0;//记录可行放置方式个数
    for (int i = 0;i<(1<<m);i++)
    {
        if(((i<<1)&i) == 0&&((i<<2)&i) == 0&&((i>>1)&i) == 0&&((i>>2)&i) == 0)//若不相互攻击，则可行
        {
            cnt++;
            g[cnt] = i;//记录放置方式（对应二进制）
        }
    }
    for (int i = 1;i<=cnt;i++)//单独搞第一行，Hack数据
    {
        if((s[1]&g[i]) != g[i]) continue;
        ans = max(ans,__builtin_popcount(g[i]));//一定要有
    }
    for (int i = 1;i<=cnt;i++)//预处理前两行
    {
        if((s[2]&g[i]) != g[i]) continue;//不符合地形，跳过
        for (int j = 1;j<=cnt;j++)
        {
            if(g[i]&g[j]) continue;//相互攻击，跳过
            if((s[1]&g[j]) != g[j]) continue;//地形
            f[2][i][j] = __builtin_popcount(g[i]) + __builtin_popcount(g[j]);//对应状态下的炮兵个数
            ans = max(ans,f[2][i][j]);//单独搞第二行，一定要有
        }
    }
    for (int r = 3;r<=n;r++)//枚举行
    {
        for (int i = 1;i<=cnt;i++)//选当行状态
        {
            if((s[r]&g[i]) != g[i]) continue;//地形
            for (int j = 1;j<=cnt;j++)//选上一行状态
            {
                if(g[i]&g[j]) continue;//相互攻击
                if((s[r-1]&g[j]) != g[j]) continue;//地形
                for (int k = 1;k<=cnt;k++)//枚举上上行状态
                {
                    if(g[i]&g[k]) continue;//冲突
                    if(g[j]&g[k]) continue;
                    if((s[r-2]&g[k]) != g[k]) continue;//地形
                    f[r][i][j] = max(f[r][i][j],f[r-1][j][k] + __builtin_popcount(g[i]));//转移状态
                    ans = max(ans,f[r][i][j]);//取最大值
                }
            }
        }
    }
    printf("%d\n",ans);
    return 0;
}
