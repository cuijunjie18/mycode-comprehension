//本题是要拿满背包且物品清单不能完全相同的情况下的dp
#include <bits/stdc++.h>
using namespace std;
int f[5001][51];//容量为x下的第i优解
int a[51];//记录不能当前物品的值
int b[51];//记录拿当前物品的值
int main()
{
    int k,v,n;
    cin>>k>>v>>n;//输入k个人(即分成k个解),背包最大容量,n个物品
    int weigh[n+1],value[n+1];
    for (int i = 1;i<=n;i++)//输入每个物品的体积及价值
    {
        cin>>weigh[i]>>value[i];
    }
    memset(f,-0x3f,sizeof(f));//因为要确定之前有没有拿满这个状态，有才可以正确转移，故初始化为负无穷
    f[0][1] = 0;//取0容量的最优解就是不取，为0，类似一个初始化
    int t;//后面循环要用
    for (int i = 1;i<=n;i++)//01背包dp转移
    {
        for (int j = v;j>=weigh[i];j--)
        {
            for (t = 1;t<=k;t++)//关键步骤，枚举取与不取当前物品的k个优解并分别记录，后面用于刷表
            {
                a[t] = f[j][t];//不取当前物品的t优解
                b[t] = f[j-weigh[i]][t] + value[i];//取当前物品的t优解
            }
            a[t] = -1;//设置边界
            b[t] = -1;//设置边界
            int x,y,p;//转移变量
            x = 1;//初始化都为1
            y = 1;
            p = 1;
            while(p<=k&&(x<=k||y<=k))//还未刷完表就继续转移，每次比较两个不同的方案，可以确保物品清单不同
            {
                if(a[x]<b[y])//如果不拿的情况更优
                {
                    f[j][p] = b[y++];//更新
                }
                else//否则
                {
                    f[j][p] = a[x++];//更新
                }
                p++;//加1
            }
        }
    }
    int sum = 0;//记录和
    for (int i = 1;i<=k;i++)//求和
    {
        sum += f[v][i];
    }
    cout<<sum<<endl;//输出
    return 0;
}