// 100分，但是unaccept
#include <bits/stdc++.h>

using namespace std;

int n,m;
double sum;

struct edge{
    int u,v;
    double w;
}e[200005];

// 反图相关结构体及变量
struct node1{
    int p;
    double d;
};
struct cmp1
{
    bool operator()(node1 x,node1 y){
        return x.d > y.d;
    }
};
vector<pair<int,double>> e1[5005];
double dis[5005];
bool vis[5005];
priority_queue<node1,vector<node1>,cmp1> reque;

// Astar相关结构体及变量
struct node2
{
    int id;
    double f,g;
};
struct cmp2
{
    bool operator()(node2 x,node2 y){
        return x.f > y.f;
    }
};
vector<pair<int,double>> e2[5005];
int cnt;
priority_queue<node2,vector<node2>,cmp2> que;

// 反图预处理到目标的代价函数
void Dij(){
    memset(vis,0,sizeof(vis));
    for (int i = 1; i <= n; i++) dis[i] = 1e15;
    dis[n] = 0;
    reque.push({n,dis[n]});
    while (!reque.empty()){
        node1 temp = reque.top();
        reque.pop();
        if (vis[temp.p]) continue;
        vis[temp.p] = true;
        for (auto to : e1[temp.p]){
            if (vis[to.first] || dis[to.first] <= temp.d + to.second) continue;
            dis[to.first] = temp.d + to.second;
            reque.push({to.first,dis[to.first]});
        }
    }
}

// Astar求k短路
void Astar(){
    node2 x;
    x.g = 0;
    x.f = dis[1];
    x.id = 1;
    que.push(x);
    while (!que.empty()){
        node2 temp = que.top();
        que.pop();
        // cout << temp.id << "\n";
        if (sum < temp.g){
            cout << cnt << "\n";
            return;
        }
        if (temp.id == n){
            cnt++;
            sum -= temp.g;
        }
        for (auto to : e2[temp.id]){
            x.id = to.first;
            x.g = temp.g + to.second;
            x.f = dis[x.id] + x.g;
            que.push(x);
        }
    }
    cout << cnt << "\n";
    return;
}


int main()
{
    // ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> m >> sum;
    for (int i = 1; i <= m; i++) cin >> e[i].u >> e[i].v >> e[i].w;
    
    // 建反图
    for (int i = 1; i <= m; i++) e1[e[i].v].push_back({e[i].u,e[i].w});
    Dij();
    // cout << 666 << "\n";

    // 建正图
    for (int i = 1; i <= m; i++) e2[e[i].u].push_back({e[i].v,e[i].w});
    Astar();

    return 0;
}

/*
4 6 14.9
1 2 1.5
2 1 1.5
1 3 3
2 3 1.5
3 4 1.5
1 4 1.5
*/