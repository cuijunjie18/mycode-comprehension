//我的方法及难点:判断整数
//一种更优的解法:预处理好x与y的变化满足x*x + y*y = m的变化构造一个方向数组(详见洛谷题解)
#include <bits/stdc++.h>
using namespace std;
typedef struct position//位置结构体
{
    int x,y;
}POSITION;
int ans[405][405];//答案
int main()
{
    int n,m;
    scanf("%d%d",&n,&m);//输入地图大小及距离m
    ans[1][1] = 1;//初始化起点
    POSITION temp = {1,1};//记录起点坐标
    queue<POSITION> que;
    que.push(temp);//入队
    while(!que.empty())//BFS
    {
        temp = que.front();//取出队头
        que.pop();//！！！一定要弹出，经常忘记
        int d = ans[temp.x][temp.y];//拿出答案
        for (int i = -sqrt(m);i<=sqrt(m);i++)//定下变化的x先，则变化的y也定了(比较预处理方法，无用部分明显多了)
        {
            if(temp.x + i<1||temp.x + i>n) continue;//如果行越界，跳过
            double k = sqrt(m - i*i);//确定列的变化
            if(k != (int)(k)) continue;//如果不是整数(有误差，所以说巧合才AC)，跳过
            int t = k;//转化为整数
            if(t+temp.y<=n)//右边加t未越界
            {
                POSITION save = {temp.x + i,temp.y + t};
                if(ans[save.x][save.y] == 0)
                {
                    ans[save.x][save.y] = d + 1;
                    que.push(save);
                }
            }
            if(temp.y-t>=1)//左边加t未越界
            {
                POSITION save = {temp.x + i,temp.y - t};
                if(ans[save.x][save.y] == 0)
                {
                    ans[save.x][save.y] = d + 1;
                    que.push(save);
                }
            }
        }
    }
    for (int i = 1;i<=n;i++)//输出答案
    {
        for (int j = 1;j<=n;j++)
        {
            if(ans[i][j]) printf("%d ",ans[i][j]-1);//其实不用判断，因为0-1 = -1
            else printf("-1 ");
        }
        printf("\n");
    }
    return 0;
}


//更优雅的代码:用了预处理及pair
#include <bits/stdc++.h>
using namespace std;
int ans[401][401];
int walk[401][2];
int cnt;
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n;
    int m;
    cin>>n>>m;
    for (int i = -n;i<=n;i++)
    {
        for (int j = -n;j<=n;j++)
        {
            if(i*i + j*j == m)
            {
                cnt++;
                walk[cnt][0] = i;
                walk[cnt][1] = j;
            }
        }
    }
    ans[1][1] = 1;
    queue<pair<int,int>>que;
    que.push(make_pair(1,1));
    while(!que.empty())
    {
        pair<int,int>p = que.front();
        que.pop();
        int x = p.first;
        int y = p.second;
        for (int i = 1;i<=cnt;i++)
        {
            int wx = x + walk[i][0];
            int wy = y + walk[i][1];
            if(wx>=1&&wx<=n&&wy>=1&&wy<=n&&ans[wx][wy] == 0)
            {
                ans[wx][wy] = ans[x][y] + 1;
                que.push(make_pair(wx,wy));
            }
        }
    }
    for (int i = 1;i<=n;i++)
    {
        for (int j = 1;j<=n;j++)
        {
            if(ans[i][j]) cout<<ans[i][j] - 1<<" ";
            else cout<<-1<<" ";
        }
        cout<<"\n";
    }
    return 0;
}

