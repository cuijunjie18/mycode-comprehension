#include <bits/stdc++.h>
using namespace std;
int block[10][10];//第一维为这个块的编号，第二维为块里面的数，block为1代表对于位置数存在，0代表不存在
int row[10][10];//i行j数是否存在
int col[10][10];//i列j数是否存在
int number[82];//每个位置对应的数，一共有81个
void DFS(int x)//填数DFS
{
    if(x > 81)//如果已经填完了，则前面所有数一定是满足规则的，输出答案
    {
        for (int i = 1;i<=9;i++)
        {
            for (int j = 1;j<=9;j++)
            {
                printf("%d ",number[(i-1)*9+j]);//输出
            }
            printf("\n");//满九换行
        }
        exit(0);//结束程序
    }
    if(number[x]!=0)//如果这个数已经填了，直接去填下一个数
    {
        DFS(x+1);
        return;//关键返回，不对一开始数独表存在的数这一位置进行操作，因为这一个位置的数是不能改变的
    }
    int r = (x-1)/9 + 1;//确定当前行
    int c = (x-1)%9 + 1;//确定当前列
    int b = 3*((r-1)/3) + (c-1)/3 + 1;//确定当前块
    for (int i = 1;i<=9;i++)//枚举可以填的数
    {
        if(row[r][i] == 0&&col[c][i] == 0&&block[b][i] == 0)//如果满足规则
        {
            number[x] = i;//第x个数填i
            row[r][i] = 1;//标记
            col[c][i] = 1;//标记
            block[b][i] = 1;//标记
            DFS(x+1);//填下一个数
            number[x] = 0;//！关键，如果不取消，则此位置回溯的时候该位置的数变成了不可改变值(函数刚开始的一个判定)
            row[r][i] = 0;//取消标记
            col[c][i] = 0;//同上
            block[b][i] = 0;//同上
        }
    }
}
int main()
{
    for (int i = 1;i<=81;i++)//输入初始数独表
    {
        scanf("%d",&number[i]);
        if(number[i] == 0) continue;//零的话说明该位置空，不处理
        int r = (i-1)/9 + 1;//确定当前位置的行
        int c = (i-1)%9 + 1;//确定当前位置的列
        int b = 3*((r-1)/3) + (c-1)/3 + 1;//确定当前位置属于哪个块
        row[r][number[i]] = 1;//标记r行number[i]已经存在
        col[c][number[i]] = 1;//同理
        block[b][number[i]] = 1;//同理
    }
    DFS(1);//从第一位开始填数
    return 0;
}
