//背景：暑假学习，复习一下阶级Nim，难点在建模
//原理：阶级Nim的模板是数量增减的单向传递，直到最后全为0
//建模：题目要求任意i，满足a[i] <= a[i+1]，即b[i] = a[i] - a[i-1] >= 0，当a[i] -= k时，b[i] -= k，b[i+1] += k，显然是个反向的阶级Nim
//难点：以最后一个b为阶梯1，判断奇偶性相同的即为贡献的部分
#include <bits/stdc++.h>
using namespace std;
void Solve()
{
    int n;
    cin >> n;
    int a[n+1];
    int b[n+1];
    a[0] = 0;
    for (int i = 1; i <= n; i++) cin >> a[i];
    for (int i = 1; i <= n; i++) b[i] = a[i] - a[i-1]; // 预处理b数组
    int temp = 0; // 初始化Nim和
    for (int i = 1; i <= n; i++)
    {
        if ((n&1) == (i&1)) temp ^= b[i]; // 仅贡献与1阶梯奇偶性相同的
    }
    if (temp) cout << "TAK" << "\n"; // Nim判断
    else cout << "NIE" << "\n";
    return;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin >> t;
    while (t--)
    {
        Solve();
    }
    return 0;
}
