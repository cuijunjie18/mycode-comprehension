//原理:把要处理的数组进行差分，建立属于该数组的差分数组，本质为前缀和的逆运算，具体原理见csdn或oiwiki
//理解:差分数组的前缀和即原数组
//时间复杂度:每次对一个区间进行统一增减操作时，单次时间复杂度为o(1),总时间复杂度:o(n)
#include <bits/stdc++.h>
using namespace std;
int a[5000001];//要处理的数组
int b[5000001];//待处理数组的差分数组(!!!树上过来,其实差分数组可以转换为最终数组)
inline int read()//快读
{
    int s = 0;
    char ch = getchar();
    while(ch < '0'||ch > '9') ch = getchar();
    while(ch <= '9'&&ch >= '0')
    {
        s = s*10 + ch - '0';
        ch = getchar();
    }
    return s;
}
int main()
{
    int n = read();//读入学生个数
    int p = read();//读入改分区间个数
    for (int i = 1;i<=n;i++)//读入每个学生的初始化成绩
    {
        a[i] = read();
    }
    b[1] = a[1];//差分数组初始化
    for (int i = 2;i<=n;i++)//求差分数组
    {
        b[i] = a[i] - a[i-1];
    }
    for (int i = 1;i<=p;i++)//依次对每个改分区间操作
    {
        int l = read();//读入区间左端点
        int r = read();//读入区间右端点
        int score = read();//读入改动分数
        b[l] += score;//差分数组改变
        b[r+1] -= score;//差分数组改变
    }
    int ans = 99999999;//求最小值，初始化答案为最大值
    for (int i = 1;i<=n;i++)//一遍求前缀和过程
    {
        a[i] = a[i-1] + b[i];//求前缀和，恢复改分后的数组    !!!由树上过来,式子可为b[i] = b[i-1] + b[i],可以省空间
        if(a[i] < ans) ans = a[i];//取最小值
    }
    printf("%d\n",ans);//输出
    return 0;
}
