//背景:离散化的初次引入,感觉不太理解
//原理:离散化 + 二分查找
//适用条件:数据量不大,但是数据大,数组下标存不下(有点哈希引入的感觉)
//时间复杂度:o(n^2)
#include <bits/stdc++.h>
using namespace std;
int a[20001];//左端点
int b[20001];//右端点
int p[40005];//离散化数组
int cnt;//离散化的数量
bool flag[400005];//标记离散化后的位置间是否要处理
int Find(int x)//二分查找原端点在离散化数组中的位置
{
    int ans = 0;
    int l = 1;
    int r = cnt;
    while(l<=r)
    {
        int mid = (l+r)>>1;
        if(p[mid]<=x)
        {
            ans = mid;
            l = mid + 1;
        }
        else r = mid - 1;
    }
    return ans;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);//加快输入输出
    int n;
    cin>>n;//输入数据量
    for (int i = 1;i<=n;i++)//依次输入n条线段左右端点
    {
        cin>>a[i]>>b[i];
        p[++cnt] = a[i];//把点位置记录在离散化数组
        p[++cnt] = b[i];
    }
    sort(p+1,p+cnt+1);//离散化数组排序,即把原来有序的位置关系离散了!!!(注意:排序完后数组可能存在相同的数,这些数是没有用的,故可以去重)
    unique(p+1,p+cnt+1);//去重减少离散数组大小,提高程序的效率
    for (int i = 1;i<=n;i++)//为原来每个有序对在离散化数组中找位置
    {
        a[i] = Find(a[i]);//左端点找
        b[i] = Find(b[i]) - 1;//右端点找,找到位置减1(原因看下面)
        for (int j = a[i];j<=b[i];j++) flag[j] = true;//该区域的离散化数组区全部标记(即这一些段可以合并的,自己画图理解)
    }
    long long ans = 0;//初始化答案
    for (int i = 1;i<=cnt;i++)//离散化数组中求和
    {
        if(flag[i]) ans += (p[i+1] - p[i]);//这里有两个细节.细节一:因为是用后面的减去前面的,所以哪怕前面未标记也用上了,所有之前要减1
										   //细节二:因为题目的线段是左闭右开的,所以计算线段长度不用+1
    }
    cout<<ans<<"\n";//输出答案
    return 0;
}
