//背景：学习了矩阵快速幂后的第一道解决的实际问题
#include <bits/stdc++.h>
#define int long long
using namespace std;
const int md = 1e9 + 7;
int temp[3][3];
void Mul(int a[][3],int b[][3],int n)
{
    memset(temp,0,sizeof(temp)); // 清空临时矩阵

    // 矩阵乘法
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            for (int k = 1; k <= n; k++){
                temp[i][j] = (temp[i][j] + a[i][k] * b[k][j])%md;
            }
        }
    }

    // 存储矩阵
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            a[i][j] = temp[i][j];
        }
    }
}

void Matrix_qpow(int a[][3],int n,int k)
{
    // 答案矩阵初始化为单位矩阵，等价于ans = 1
    int ans[n+1][3];
    memset(ans,0,sizeof(ans));
    for (int i = 1; i <= n; i++) ans[i][i] = 1;
    while (k)
    {
        if (k & 1) Mul(ans,a,n);
        Mul(a,a,n);
        k >>= 1;
    }
    cout << (ans[1][1] + ans[2][1]) % md << "\n"; // 答案
}
signed main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n;
    cin >> n;
    if (n <= 2)
    {
        cout << 1 << "\n";
        return 0;
    }
    int a[3][3];
    memset(a,0,sizeof(a));
    a[1][1] = a[1][2] = a[2][1] = 1; // 构建的矩阵
    Matrix_qpow(a,2,n-2); // 注意这里是n - 2
    return 0;
}