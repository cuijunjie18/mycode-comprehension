//背景:我的思维是真的垃圾,思维局限,此题是字典树统计前缀的好题,包括了包前缀及被前缀的统计
//收获:以后思考trie树的统计题,优先想到两个数组,1,结束统计数组;2,经过量统计数组
//原理:Trie树
#include <bits/stdc++.h>
using namespace std;
int trie[500001][2];//Trie树数组
int cnt[500001];//结束统计数组
int sum[500001];//经过统计数组
int id;//移动变量
int num[500001];//临时数组
int now;//临时数组大小
void Insert()//插入数组
{
    int p = 0;//初始化移动变量
    for (int i = 1;i<=now;i++)
    {
        int k = num[i];
        if(trie[p][k] == 0) trie[p][k] = ++id;
        p = trie[p][k];
        sum[p]++;//经过数组累加
    }
    cnt[p]++;//结束数组累加
}
int Find()//查找并计算答案
{
    int p = 0;//初始化移动变量
    int ans = 0;//初始化统计答案
    for (int i = 1;i<=now;i++)
    {
        int k = num[i];
        if(trie[p][k] == 0) return ans;//如果中断了,说明只有包前缀的答案,返回即可
        p = trie[p][k];
        ans += cnt[p];//累加
    }
    if(cnt[p]) ans += (sum[p] - cnt[p]);//如果结束位置是有结束信息的,累加被前缀的数量并减去重复的
    else ans += sum[p];//否则直接累加被前缀量
    return ans;//返回答案
}
void Solve()
{
    int n,m;
    cin>>n>>m;//输入有n条截获的信息
    for (int i = 1;i<=n;i++)//依次输入
    {
        cin>>now;//输入大小
        for (int j = 1;j<=now;j++) cin>>num[j];//输入信息的二进制
        Insert();//插入Trie树
    }
    for (int i = 1;i<=m;i++)//进行匹配暗语
    {
        cin>>now;//输入大小
        for (int j = 1;j<=now;j++) cin>>num[j];//输入已知的暗语
        cout<<Find()<<"\n";//输出与它可能匹配的数量
    }
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    while(t--)
    {
        Solve();
    }
    return 0;
}
