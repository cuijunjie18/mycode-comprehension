//背景:思维题,看了标签是字典树也不会,真的emo了
//原理:贪心 + 进制 + 字典树
//时间复杂度:o(nlogn)
#include <bits/stdc++.h>
using namespace std;
int trie[8000001][2];//字典树数组
int num[1000001][35];//每个数字的二进制状态,低位到高位
int id;//移动变量
int pown[35];//预处理的2^i次方数组
void prework()//预处理
{
    pown[1] = 1;
    for (int i = 2;i<=34;i++) pown[i] = pown[i-1]*2;
}
void cvtb(int pos,int x)//转换为二进制数组状态
{
    for (int i = 1;i<=32;i++)//低位到高位
    {
        num[pos][i] = x%2;
        x /= 2;
    }
}
void Insert(int x)//插入字典树
{
    int p = 0;//初始化指针
    for (int i = 32;i>=1;i--)//高位到低位插入
    {
        if(trie[p][num[x][i]] == 0) trie[p][num[x][i]] = ++id;
        p = trie[p][num[x][i]];
    }
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    prework();
    int n,x;
    cin>>n;
    for (int i = 1;i<=n;i++)//建立字典树
    {
        cin>>x;
        cvtb(i,x);
        Insert(i);
    }
    int ans = 0;//初始化答案
    for (int i = 1;i<=n;i++)//找到每个数的最大异或的配对值
    {
        int temp = 0;//初始化临时答案
        int p = 0;//初始化指针
        for (int j = 32;j>=1;j--)//高位开始
        {
            if(num[i][j] == 0)//如果是0
            {
                if(trie[p][1])//如果有1
                {
                    temp += pown[j];//累加答案
                    p = trie[p][1];//移动二进制的下一位
                }
                else p = trie[p][0];//也移动二进制的下一位
            }
            else//同理
            {
                if(trie[p][0])
                {
                    temp += pown[j];
                    p = trie[p][0];
                }
                else p = trie[p][1];
            }
        }
        ans = max(ans,temp);//最后取最大值
    }
    cout<<ans<<"\n";//输出
    return 0;
}
