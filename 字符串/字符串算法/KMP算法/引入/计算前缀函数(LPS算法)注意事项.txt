前缀函数的理解:即前缀对应长度的字符串子串等于后缀对应长度的字符子串的最长长度,即Longest Prefixion String,简称LPS
1,字符串的下标是从0开始的
2,字符串的前缀与后缀均是真的(即不能是自己)
3,初始化Pi[0] = 0
4,计算前缀函数算法是一个在线算法,可以一边输入字符串一边处理
5,时间复杂度优化的核心:LPS[i] <= LPS[i-1] + 1,即相邻的LPS最多相差1 




迭代版本(自己查看理解领悟)
(1)朴素算法 o(n^3):
vector<int> prefix_function(string s) {
  int n = (int)s.length();
  vector<int> pi(n);
  for (int i = 1; i < n; i++)
    for (int j = i; j >= 0; j--)
      if (s.substr(0, j) == s.substr(i - j + 1, j)) {
        pi[i] = j;
        break;
      }
  return pi;
}

(2)相邻的前缀函数值至多增加1优化 o(n^2):
vector<int> prefix_function(string s) {
  int n = (int)s.length();
  vector<int> pi(n);
  for (int i = 1; i < n; i++)
    for (int j = pi[i - 1] + 1; j >= 0; j--)  // improved: j=i => j=pi[i-1]+1
      if (s.substr(0, j) == s.substr(i - j + 1, j)) {
        pi[i] = j;
        break;
      }
  return pi;
}

(3)最终算法 o(n),
分析:由于(2)中发现的结论限制,如果j要在循环中多次跳,那么它的后面就肯定跳不了多次,而且每次最多累加1
    所以如果在某次循环中跳了n次,则一定会有个累加过程到n才可能再来一次n次
    分析每一个i,此i有两个选择:(1)不停往回跳
						   (2)累加了1
	发现,n长度的文本串就要做n次选择,累加时间复杂度为o(1),跳最坏o(n)
	而数据范围为n,所以最多有n次累积,而最多可以跳n次,而跳会消耗累积的次数,故最坏操作数约为2*n,时间复杂度为o(n)

vector<int> prefix_function(string s) {
  int n = (int)s.length();
  vector<int> pi(n);
  for (int i = 1; i < n; i++) {
    int j = pi[i - 1];//观察初始时的j是上一个位置的前缀函数
    while (j > 0 && s[i] != s[j]) j = pi[j - 1];
    if (s[i] == s[j]) j++;//最多加1
    pi[i] = j;//最多加1
  }
  return pi;
}