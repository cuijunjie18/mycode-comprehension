//背景:想了几个思路，包括层级判断,发现理解错题目了,一开始认为要确定的中位数是否存在(可以层级判断),但是实际上是判断某个点是否可能为中位数
//思路:即计算严格小于某个点的数量,记录严格大于某个点的数量,如果均小于n/2,则其可能为中位数
//时间复杂度:因为虽然n的总和为2e3,但是每次n的范围为100,m<=n^2,故时间复杂度:o(2e7)
#include <bits/stdc++.h>
using namespace std;
int n,m,x,y;//n为点数,m为边数
vector<int> e1[1001];//邻接表存比它大的边
vector<int> e2[1001];//邻接表存比它小的边
unordered_set<int> check;//判断出现在拓扑关系中的数的数目!!!重点细节
int inlow[1001];//记录小的指向它的入度
int inhigh[1001];//记录大的指向它的入度
bool vis[1001];//用于BFS的
bool topo_sort()//拓扑排序判断是否成环
{
    int ans = 0;//初始化答案
    int in[1001];//建立临时入度,不能用inlow或inhigh,因为这两个后面要用,不能改变
    queue<int> que;//初始化队列
    for (auto v:check)//!!!!只能在存于与拓扑图中的数找入度为0的点,否则不在图关系出现过的入度也为0,会导致判断成环出错
    {
        if(inlow[v] == 0) que.push(v);//0入队
        in[v] = inlow[v];//存储临时入度数组
    }
    int check_num = check.size();//计算拓扑图中的数量
    while(!que.empty())//拓扑排序
    {
        x = que.front();
        que.pop();
        ans++;
        for (auto v:e1[x])//邻接表的好处
        {
            in[v]--;
            if(in[v] == 0) que.push(v);
        }
    }
    return ans != check_num;//返回有环
}
int bfs1(int b)//计算已知大于它的数量
{
    memset(vis,0,sizeof(vis));
    int ans = 0;
    queue<int> que;
    for (auto v:e1[b])
    {
        que.push(v);
        vis[v] = true;
    }
    while(!que.empty())
    {
        int temp = que.front();
        que.pop();
        ans++;
        for (auto v:e1[temp])
        {
            if(!vis[v])
            {
                vis[v] = true;
                que.push(v);
            }
        }
    }
    return ans;
}
int bfs2(int b)//计算已知小于它的数量
{
    memset(vis,0,sizeof(vis));
    int ans = 0;
    queue<int> que;
    for (auto v:e2[b])
    {
        que.push(v);
        vis[v] = true;
    }
    while(!que.empty())
    {
        int temp = que.front();
        que.pop();
        ans++;
        for (auto v:e2[temp])
        {
            if(!vis[v])
            {
                vis[v] = true;
                que.push(v);
            }
        }
    }
    return ans;
}
void Solve()
{
   cin>>n>>m;
   memset(inlow,0,sizeof(inlow));//清零
   memset(inhigh,0,sizeof(inhigh));//清零
   check.clear();//清空拓扑图中存在的点
   for (int i = 1;i<=n;i++) e1[i].clear(),e2[i].clear();//清空所有边
   for (int i = 1;i<=m;i++)//建立双图
   {
       cin>>x>>y;
       e1[y].push_back(x);
       inlow[x]++;
       e2[x].push_back(y);
       inhigh[y]++;
       check.insert(x);//入拓扑图中的点集
       check.insert(y);
   }
   if(topo_sort())//判断是否有环(即不能满足全部的偏序关系)
   {
       for (int i = 1;i<=n;i++) cout<<0;//全部输出0
       cout<<"\n";
       return;
   }
   for (int i = 1;i<=n;i++)//依次判断每个数是否可能成为中位数
   {
       if(check.count(i) == 0) cout<<1;//如果不出现在拓扑点集中,大小可以随意取,肯定可以取到中位数
       else
       {
           x = bfs1(i);
           y = bfs2(i);
           if(x<=n/2&&y<=n/2) cout<<1;//判断思路,大于它的与小于它的均小于一半,可以从其他不确定的关系中取数使其成为中位数
           else cout<<0;
       }
   }
   cout<<"\n";
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);//加快输入输出
    int t;
    cin>>t;
    while(t--)
    {
        Solve();
    }
    return 0;
}
/*1
5 4
1 5
2 4
3 1
3 2*/
