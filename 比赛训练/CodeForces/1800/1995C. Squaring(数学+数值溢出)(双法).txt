//背景：暑假训练，峰哥的公式法，这题可以过，1883E过不了
#include <bits/stdc++.h>
#define ll long long
using namespace std;
void Solve()
{
    int n;
    cin >> n;
    ll a[n+1];
    ll x[n+1];
    for (int i = 1; i <= n; i++) cin >> a[i];
    ll ans = 0;
    x[1] = 0;
    for (int i = 2; i <= n; i++)
    {
        x[i] = 0;
        if (a[i] == 1 && a[i] < a[i-1])
        {
            cout << -1 << "\n";
            return;
        }
        x[i] = ceil(x[i-1] + (log(log((long double)(a[i-1]))) - log(log((long double)(a[i]))))/log((long double)(2)));
        x[i] = max(0ll,x[i]); // 如果算出负数说明原本就满足大于等于，故不需要操作
        //cout << x[i] << "\n";
        ans += x[i];
    }
    cout << ans << "\n";
    return;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin >> t;
    while (t--)
    {
        Solve();
    }
    return 0;
}


//法二：类比1883E，不过有一些推理
//好题解的理解：https://blog.csdn.net/EQUINOX1/article/details/140659833
#include <bits/stdc++.h>
#define ll long long
using namespace std;
void Solve()
{
    int n;
    cin >> n;
    ll a[n+1];
    for (int i = 1; i <= n; i++) cin >> a[i];
    ll x[n+1];
    ll ans = 0;
    x[1] = 0;
    for (int i = 2; i <= n; i++) // 模板
    {
        x[i] = 0; // 初始化全为0
        if (a[i] == 1&&a[i-1] != 1)
        {
            ans = -1;
            break;
        }
        if (a[i] == a[i-1]) x[i] = x[i-1];
        else if (a[i] < a[i-1])
        {
            ll temp = a[i];
            int t = 0;
            while (temp < a[i-1])
            {
                t++;
                temp *= temp;
            }
            x[i] = x[i-1] + t;
        }
        else if (a[i] > a[i-1]&&a[i-1] != 1)//这里注意上一个不能是1，因为1*1 = 1
        {
            ll temp = a[i-1];
            int t = 0;
            while (temp <= a[i])
            {
                t++;
                temp *= temp;
            }
            t--;
            x[i] = max(0ll,x[i-1]-t);
        }
        ans += x[i];
    }
    cout << ans << "\n";
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin >> t;
    while (t--)
    {
        Solve();
    }
    return 0;
}
