//背景：暑假训练，div2的D题，看了题解才会，一开始贪心错误
//原理：树形dp
//时间复杂度：o(nlogn*logn)
#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll dp[300005][25];//dp数组，x节点在时间i时被消灭包括其子树的最小攻击值
ll a[300005];//每个monster的攻击值
int k;//最多的存活时间
vector<int> e[300005];
void DFS(int x,int fa)
{
    bool flag = false;//标记是否有儿子
    for (auto to:e[x])
    {
        if(to == fa) continue;
        DFS(to,x);//不要忘了递归！！！最近老是忘记
        flag = true;//有儿子
        for (int i = 1;i<=k;i++)//枚举当前节点消灭时间
        {
            ll temp = 2e18;//初始化最小值
            for (int j = 1;j<=k;j++)//枚举to节点消灭时间
            {
                if(j == i) continue;//相邻节点不能同时消灭
                temp = min(temp,dp[to][j]);//取最小值
            }
            dp[x][i] += temp;//累加
        }
    }
    if(!flag)//如果没有儿子，进行初始化
    {
        for (int i = 1;i<=k;i++) dp[x][i] = a[x]*i;
    }
    else//有儿子
    {
        for (int i = 1;i<=k;i++) dp[x][i] += a[x]*i;//加上当前节点
    }
}
void Solve()
{
    int n,x,y;
    cin>>n;
    k = log(n)/log(2) + 1;//可以证明存活时间的上界(最糟糕为一条链都可以logn[n])
    for (int i = 1;i<=n;i++)//初始化
    {
        e[i].clear();
        for (int j = 1;j<=k;j++) dp[i][j] = 0;//其实不用，DFS里有
    }
    for (int i = 1;i<=n;i++) cin>>a[i];
    for (int i = 1;i<=n-1;i++)//建树
    {
        cin>>x>>y;
        e[x].push_back(y);
        e[y].push_back(x);
    }
    DFS(1,0);//dp
    ll ans = 2e18;//初始化答案
    for (int i = 1;i<=k;i++) ans = min(ans,dp[1][i]);//枚举消灭时间取最小值
    cout<<ans<<"\n";//输出
    return;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin>>t;
    while(t--)
    {
        Solve();
    }
    return 0;
}
