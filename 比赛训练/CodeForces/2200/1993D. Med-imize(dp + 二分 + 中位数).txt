//背景：memset害死人，思维 + 二分 + 中位数好题
//难点：最后的序列原下标i，有(i - 1)%k + 1（取模偏移），从1开始递增至序列长度
//收获：卡常 + 中位数套路(二分)
#include <bits/stdc++.h>
#define MAXN 500005
using namespace std;
int dp[MAXN]; // 表示获取的序列下标为i的最大值
int a[MAXN];
int n,k;
bool check(int x)
{
    memset(dp,-0x3f,((n-1)%k + 5) << 2); // int 数据4个字节，故 << 2，卡常数技巧

    // 注：不能定义dp数组大小为最后获取到的序列长度，因为dp过程会越界(因为可能更大的)
    for (int i = 1; i <= n; i++)
    {
        int temp = ((a[i] >= x)?1:-1); // 判断大小
        if ((i-1)%k + 1 == 1) // 当前位置只能当开头
        {
            dp[1] = max(dp[1],temp);
        }
        else // 否则dp之前的
        {
            dp[(i-1)%k + 1] = max(dp[(i-1)%k + 1],dp[(i-1)%k] + temp);
        }
    }
    return dp[(n-1)%k + 1] > 0; // 根据题目中位数的定义，无论奇偶都是严格大于0
}
void Solve()
{
    cin >> n >> k;
    int minn = 1e9,maxn = 0; // 卡常数技巧
    for (int i = 1; i <= n; i++) cin >> a[i],minn = min(minn,a[i]),maxn = max(maxn,a[i]);
    int l = minn,r = maxn;
    int ans = 0;
    while (l <= r) // 二分中位数
    {
        int mid = (l + r) >> 1;
        if (check(mid))
        {
            ans = mid;
            l = mid + 1;
        }
        else r = mid - 1;
    }
    cout << ans << "\n";
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin >> t;
    while (t--)
    {
        Solve();
    }
    return 0;
}