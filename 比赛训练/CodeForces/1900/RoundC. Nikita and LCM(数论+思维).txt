//背景:数论好题
//收获:GCD与LCM的手打函数及分析包含两个问题的一般思路
//思路:一般这种与lcm,gcd有关的,复杂度极有可能与因子有关
//时间复杂度:o(n*sqrt(a)),n<=2000,a<=1e9
#include <bits/stdc++.h>
using namespace std;
int n;//数据大小
int a[2001];//原数组
int gcd(int a,int b)//求两数的最大公约数,欧几里得算法
{
    if(b == 0) return a;
    else return gcd(b,a%b);
}
int lcm(int a,int b)//求两数的最小公倍数
{
    return (long long)(a)*b/gcd(a,b);//注意long long
}
int Count(int x)//计算当前x为答案是否满足
{
    long long now = 1;//初始化lcm
    int ans = 0;//记录满足条件的个数
    for (int i = 1;i<=n;i++)//遍历
    {
        if(x%a[i] == 0)//如果满足x包含a[i]这个因子
        {
            now = lcm(now,a[i]);//求一次lcm
            ans++;//答案累加
        }
    }
    if(now == x) return ans;//如果最后答案真的是x,返回ans有效
    else return 0;//否则无效,返回0
}
void Solve()
{
    set<int> s;//记录集合重的数
    int maxn = 0;//记录最大值
    cin>>n;
    for (int i = 1;i<=n;i++)//输入n个数
    {
        cin>>a[i];
        s.insert(a[i]);//放入集合
        maxn = max(maxn,a[i]);//更新最大值
    }
    int ans = 0;//初始化答案为0
    for (int i = 1;i<=n;i++)//特判长度为n
    {
        if(maxn%a[i] != 0)//如果最大值不能整除某个数,那么全部数都选必然大于最大值,一定不在集合中
        {
            cout<<n<<"\n";//直接输出答案为n
            return;//返回
        }
    }
    //否则剩下的全部数都是maxn的因子,所以因子与因子的lcm一定不会超过maxn,并且该lcm一定是maxn的因子,枚举可能的答案取最大值即可
    for (int i = 1;i*i<=maxn;i++)//枚举maxn的因子
    {
        if(maxn%i == 0)//如果是因子(认为它是答案对应的lcm)
        {
            if(s.count(i) == 0) ans = max(ans,Count(i));//如果答案不在集合中才能进行计算
            if(s.count(maxn/i) == 0) ans = max(ans,Count(maxn/i));//maxn/i也是因子,因此也要算
        }
    }
    cout<<ans<<"\n";//输出答案
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t;
    cin>>t;
    while(t--)
    {
        Solve();
    }
    return 0;
}
