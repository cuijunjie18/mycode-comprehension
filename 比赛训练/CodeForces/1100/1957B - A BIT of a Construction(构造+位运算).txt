//背景：暑假训练，自己的思路应该对了，但是不知道哪里错，看了题解简化了思路
//思路：输出两个数即可，第一个高位1后面全置1，高位1置零，保证1最大；第二个数为k-第一个数，保证和，后面全0
#include <bits/stdc++.h>
using namespace std;
int quick_pow(int a,int b)//自己定义幂运算，防止输出格式错误（内置pow直接输出的话为浮点型）
{
    int ans = 1;
    while(b)
    {
        if(b&1) ans = ans*a;
        a = a*a;
        b >>= 1;
    }
    return ans;
}
void Solve()
{
   int n,k,cnt = 0;//二进制位数
   cin>>n>>k;
   int temp = k;
   while(temp)//计算二进制位数
   {
       cnt++;
       temp /= 2;
   }
   if(n == 1) cout<<k<<"\n";//如果是1，直接输出
   else
   {
       int ans = quick_pow(2,cnt-1) - 1;//如果直接用pow要像这样接收，不能cout<<pow();为浮点型
       cout<<ans<<" "<<k-ans<<" ";//输出
       for (int i = 3;i<=n;i++) cout<<0<<" ";//后面全零
       cout<<"\n";
   }
   return;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin>>t;
    while(t--)
    {
        Solve();
    }
    return 0;
}
