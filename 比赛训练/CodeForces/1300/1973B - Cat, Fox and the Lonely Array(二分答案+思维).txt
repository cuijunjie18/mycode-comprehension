//背景：终于自己切了一道1300，虽然不小心看到了二分
//思路：二分答案，前提是证明答案满足单调性，即若k满足答案，那么k+1也一定满足（自己在草稿纸上模拟易证），故有单调性，二分答案
//难点：二分check函数如何保证时间复杂度
//时间复杂度：o(nlogAlogn)，和标准答案一样
#include <bits/stdc++.h>
using namespace std;
int a[100005];
int pos[100005][22];//第i个数的二进制下的第j位
int n;
void prework()//预处理
{
    for (int i = 1;i<=n;i++)//清空，防止上次余留的干扰
    {
        for (int j = 1;j<=21;j++) pos[i][j] = 0;
    }
    for (int i = 1;i<=n;i++)//处理每个数
    {
        int temp = a[i];
        int cnt = 0;
        while(temp)
        {
            pos[i][++cnt] = temp%2;
            temp /= 2;
        }
    }
    /*
    for (int i = 1;i<=n;i++)
    {
        for (int j = 10;j>=1;j--) cout<<pos[i][j];
        cout<<"\n";
    }*/
}
bool check(int k)//核心难点：二分检查
{
   bool vis[22];//标记一系列或完后位置上是否为1
   int times[22];//记录每个位置上1出现的个数，用于动态维护
   for (int i = 1;i<=21;i++) vis[i] = false,times[i] = 0;//初始化
   //先获取一个模板
   for (int i = 1;i<=k;i++)
   {
       for (int j = 1;j<=21;j++) times[j] += pos[i][j];//累加
   }
   for (int i = 1;i<=21;i++) vis[i] = (times[i] >= 1);//记录模板
   for (int i = 2;i<=n-k+1;i++)
   {
       for (int j = 1;j<=21;j++) times[j] -= pos[i-1][j];//去掉上一个线段的起点
       for (int j = 1;j<=21;j++) times[j] += pos[i+k-1][j];//或上现在线段的终点
       for (int j = 1;j<=21;j++)
       {
           if(times[j] == 0&&vis[j] == true) return false;//如果与模板冲突
           if(times[j] >= 1&&vis[j] == false) return false;//如果与模板冲突
       }
   }
   return true;//返回正确
}
void Solve()
{
    cin>>n;
    for (int i = 1;i<=n;i++) cin>>a[i];
    prework();
    int ans = n;
    int l = 1,r = n;
    while(l<=r)//二分模板
    {
        int mid = (l+r)>>1;
        if(check(mid))
        {
            ans = mid;
            r = mid - 1;
        }
        else l = mid + 1;
    }
    cout<<ans<<"\n";
    return;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int t = 1;
    cin>>t;
    while(t--)
    {
        Solve();
    }
    return 0;
}
