#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll md = 1000;
ll tree[4*100005];
ll a[100005];
queue<pair<int,ll>> lazy[4*100005];
void Build(int l,int r,int pos)
{
    if(l == r)
    {
        tree[pos] = a[l]%md;//模零错误
        return;
    }
    int mid = (l+r)>>1;
    Build(l,mid,2*pos);
    Build(mid+1,r,2*pos+1);
    tree[pos] = (tree[2*pos] + tree[2*pos+1])%md;
}
void update(int l,int r,int s,int t,int pos,int c,ll k)
{
    if(l<=s&&r>=t)
    {
        if(c == 1)
        {
            tree[pos] = tree[pos]*k;
            lazy[pos].push({1,k});
        }
        else if(c == 2)
        {
            tree[pos] = tree[pos] + k*(t-s+1);
            lazy[pos].push({2,k});
        }
        return;
    }
    int mid = (s+t)>>1;
    while(!lazy[pos].empty() && s != t)
    {
        int x = lazy[pos].front().first;
        ll temp = lazy[pos].front().second;
        lazy[pos].pop();
        if(x == 1)
        {
            tree[2*pos] = tree[2*pos]*temp%md;
            tree[2*pos+1] = tree[2*pos+1]*temp%md;
            lazy[2*pos].push({1,temp});
            lazy[2*pos+1].push({1,temp});
        }
        else if(x == 2)
        {
            tree[2*pos] = (tree[2*pos] + temp*(mid-s+1)%md)%md;
            tree[2*pos+1] = (tree[2*pos+1] + temp*(t-mid)%md)%md;
            lazy[2*pos].push({2,temp});
            lazy[2*pos+1].push({2,temp});
        }
    }
    if(l <= mid) update(l,r,s,mid,2*pos,c,k);
    if(r >= mid + 1) update(l,r,mid+1,t,2*pos+1,c,k);
    tree[pos] = (tree[2*pos] + tree[2*pos+1])%md;
}
ll getsum(int l,int r,int s,int t,int pos)
{
    if(l<=s&&r>=t) return tree[pos]%md;
    int mid = (l+r)>>1;
    while(!lazy[pos].empty() && s != t)
    {
        int x = lazy[pos].front().first;
        ll temp = lazy[pos].front().second;
        lazy[pos].pop();
        if(x == 1)
        {
            tree[2*pos] = tree[2*pos]*temp%md;
            tree[2*pos+1] = tree[2*pos+1]*temp%md;
            lazy[2*pos].push({1,temp});
            lazy[2*pos+1].push({1,temp});
        }
        else if(x == 2)
        {
            tree[2*pos] = (tree[2*pos] + temp*(mid-s+1)%md)%md;
            tree[2*pos+1] = (tree[2*pos+1] + temp*(t-mid)%md)%md;
            lazy[2*pos].push({2,temp});
            lazy[2*pos+1].push({2,temp});
        }
    }
    ll sum = 0;
    if(l <= mid) sum = (sum + getsum(l,r,s,mid,2*pos));
    sum %= md;
    if(r >= mid + 1) sum = (sum + getsum(l,r,mid + 1,t,2*pos+1));
    return sum%md;
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n,m,md,c,x,y,k;//这里有md
    cin>>n>>m;
    cin>>md;//输入的md并没有记录到全局,所以全局仍旧是0
    for (int i = 1;i<=n;i++) cin>>a[i];
    Build(1,n,1);
    cout<<666<<"\n";
    while(m--)
    {
        cin>>c;
        if(c == 1)
        {
            cin>>x>>y>>k;
            update(x,y,1,n,1,c,k);
        }
        else if(c == 2)
        {
            cin>>x>>y>>k;
            update(x,y,1,n,1,c,k);
        }
        else if(c == 3)
        {
            cin>>x>>y;
            cout<<getsum(x,y,1,n,1)<<"\n";
        }
    }
    return 0;
}
/*
5 5 38
1 5 4 2 3
*/
